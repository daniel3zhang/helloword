{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "CloudFrontConditionDev": {
      "Fn::And": [
        {
          "Condition": "UseDevCondition"
        },
        {
          "Condition": "EnableCloudFrontCondition"
        }
      ]
    },
    "CloudFrontConditionPrdStage": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Condition": "UseDevCondition"
            }
          ]
        },
        {
          "Condition": "EnableCloudFrontCondition"
        }
      ]
    },
    "EnableCloudFrontCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableCloudFront"
        },
        "yes"
      ]
    },
    "UseDevCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "dev"
      ]
    },
    "UsePrdCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "prd"
      ]
    }
  },
  "Description": "SMDW Infrastructure and application setup",
  "Mappings": {
    "AWSEnv2CidrBlockPrefix": {
      "eu-west-1": {
        "dev": "10.30",
        "prd": "10.50",
        "stage": "10.40"
      }
    },
    "AWSEnv2Route53ZoneID": {
      "eu-west-1": {
        "dev": "Z3NBKPKYJ6RJ9",
        "prd": "ZHC7VLRMIJ4EX",
        "stage": "ZHC7VLRMIJ4EX"
      }
    },
    "AWSEnv2Route53ZoneName": {
      "eu-west-1": {
        "dev": "dev.developer.sonymobile.com",
        "prd": "developer.sonymobile.com",
        "stage": "stage.developer.sonymobile.com"
      }
    },
    "AWSInstanceType2Arch": {
      "c4.large": {
        "Arch": "64HVM"
      },
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m4.large": {
        "Arch": "64HVM"
      },
      "t2.large": {
        "Arch": "64HVM"
      },
      "t2.medium": {
        "Arch": "64HVM"
      },
      "t2.micro": {
        "Arch": "64HVM"
      },
      "t2.small": {
        "Arch": "64HVM"
      }
    },
    "AWSRegion2Env2CacheNodeInstanceType": {
      "eu-west-1": {
        "dev": "cache.t2.micro",
        "prd": "cache.t2.medium",
        "stage": "cache.t2.small"
      }
    },
    "AWSRegion2Env2RDSAllocatedStorage": {
      "eu-west-1": {
        "dev": "10",
        "prd": "100",
        "stage": "10"
      }
    },
    "AWSRegion2Env2RDSNodeInstanceType": {
      "eu-west-1": {
        "dev": "db.t2.small",
        "prd": "db.m4.large",
        "stage": "db.t2.small"
      }
    },
    "AWSRegion2Env2ServerNodeInstanceType": {
      "eu-west-1": {
        "dev": "t2.micro",
        "prd": "m3.medium",
        "stage": "t2.medium"
      }
    },
    "AWSRegionArch2AMI": {
      "dev": {
        "64": "ami-41597c27",
        "64HVM": "ami-ef281d89"
      },
      "prd": {
        "64": "ami-41597c27",
        "64HVM": "ami-77dafe11"
      },
      "stage": {
        "64": "ami-41597c27",
        "64HVM": "ami-77dafe11"
      }
    },
    "Env2ASGSize": {
      "dev": {
        "desired": "2",
        "max": "3",
        "min": "2"
      },
      "prd": {
        "desired": "2",
        "max": "8",
        "min": "2"
      },
      "stage": {
        "desired": "2",
        "max": "6",
        "min": "2"
      }
    },
    "Env2CertificateARN": {
      "cloudfront": {
        "dev": "arn:aws:acm:us-east-1:834181233313:certificate/fbeb7826-1de6-4868-8945-3c1b50a533f7",
        "prd": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c",
        "stage": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c"
      },
      "elb": {
        "dev": "arn:aws:acm:eu-west-1:834181233313:certificate/729a22ea-2535-4c0e-978a-badc8a835fa7",
        "prd": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079",
        "stage": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079"
      }
    }
  },
  "Outputs": {
    "MemcacheInternalDNSName": {
      "Description": "The Internal DNS Name of the Memcache service",
      "Value": {
        "Ref": "ElastiCacheMemcacheDNSRecordSet"
      }
    },
    "RDSDNSName": {
      "Description": "The DNSName of the RDS service",
      "Value": {
        "Fn::GetAtt": [
          "DBInstance",
          "Endpoint.Address"
        ]
      }
    },
    "RDSInternalDNSName": {
      "Description": "The Internal DNS Name of the RDS service",
      "Value": {
        "Ref": "RDSDNSRecordSet"
      }
    },
	"SystemPlatformUpgradeAccessKeyID": {
      "Description": "SystemPlatformUpgradeUserAccessKey ID",
      "Value": {
        "Ref": "SystemPlatformUpgradeKeys"
      }
    },
    "SystemPlatformUpgradeUserAccessKeySecret": {
      "Description": "SystemPlatformUpgradeUserAccessKey Secret",
      "Value": {
        "Fn::GetAtt": [
          "SystemPlatformUpgradeKeys",
          "SecretAccessKey"
        ]
      }
    },
    "S3StaticAssetsBucketAccessKeyID": {
      "Description": "S3StaticAssetsBucketAccessKey ID",
      "Value": {
        "Ref": "S3StaticAssetsBucketAccessKey"
      }
    },
    "S3StaticAssetsBucketAccessKeySecret": {
      "Description": "S3StaticAssetsBucketAccessKey Secret",
      "Value": {
        "Fn::GetAtt": [
          "S3StaticAssetsBucketAccessKey",
          "SecretAccessKey"
        ]
      }
    },
    "S3StaticAssetsBucketName": {
      "Description": "The S3 Static assets bucket name",
      "Value": {
        "Ref": "S3BucketStaticAssets"
      }
    }
  },
  "Parameters": {
    "AppName": {
      "Default": "developerworld",
      "Description": "Name of the software",
      "Type": "String"
    },
    "AppVersion": {
      "Default": "latest",
      "Description": "Version of the software",
      "Type": "String"
    },
    "DBPassword": {
      "Description": "Database Password to use",
      "NoEcho": "true",
      "Type": "String"
    },
    "EnableCloudFront": {
      "AllowedValues": [
        "yes",
        "no"
      ],
      "ConstraintDescription": "must specify yes or no",
      "Default": "yes",
      "Description": "Enable CloudFront",
      "Type": "String"
    },
    "EnvType": {
      "AllowedValues": [
        "dev",
        "stage",
        "prd"
      ],
      "ConstraintDescription": "must specify dev, stage or prd",
      "Description": "Environment type.",
      "Type": "String"
    },
    "KeyName": {
      "AllowedValues": [
        "smdw-dev",
        "smdw-stage",
        "smdw-prd"
      ],
      "Description": "AWS key to use",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LambdaDNSRole": {
      "Default": "arn:aws:iam::834181233313:role/foundation-dev-LambdaCustomCloudformationRole-1ARJD5SEP39IR",
      "Description": "ARN for Custom Route53 resource (Lambda)",
      "Type": "String"
    },
    "LambdaKMSArn": {
      "Default": "arn:aws:kms:eu-west-1:834181233313:key/4e8d92d5-52d7-401a-8c9d-1232d4856515",
      "Description": "ARN for KMS Key ARN used in Lambda Custom Route53 resource",
      "Type": "String"
    },
    "NotificationEmail": {
      "Default": "dl-ww-developerprogram-infra@sonymobile.com,itpc.awsam@sonymobile.com",
      "Description": "Email Address(es) for notifications",
      "Type": "CommaDelimitedList"
    },
    "RemoteRoute53AccessKeyBlob": {
      "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAHIwcAYJKoZIhvcNAQcGoGMwYQIBADBcBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDAzkcxK0+YDPujynGwIBEIAvufcVfT0poMDu1y88jSX2srkyScVxVd1FnRRnZomb3ibC5OiBpk7EyhsQD+zrwlM=",
      "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource ACCESS_KEY",
      "Type": "String"
    },
    "RemoteRoute53SecretKeyBlob": {
      "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAIcwgYQGCSqGSIb3DQEHBqB3MHUCAQAwcAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAzNQMDNh/tR5tjBGlMCARCAQ7YkER+gcdhFrU2WErh3pYXmz/5qdmZfCYPOQGuOpjXtEzlTc9HlvvHeaLc2D1wWYlUc8gKBg4x9W3kM7s3h65KfRmQ=",
      "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource SECRET_KEY",
      "Type": "String"
    }
  },
  "Resources": {
    "ASGandELBManagementPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "autoscaling:Describe*",
                "autoscaling:EnterStandby",
                "autoscaling:ExitStandby",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:SuspendProcesses",
                "autoscaling:ResumeProcesses"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ASGandELBManagement"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "AWSCloudwatchLogsStreamPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CloudWatchLogsStream"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ApplicationDeploy": {
      "Properties": {
        "ApplicationName": {
          "Ref": "AWS::StackName"
        }
      },
      "Type": "AWS::CodeDeploy::Application"
    },
    "ApplicationDeploymentGroup": {
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationDeploy"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServerAutoScalingGroup"
          }
        ],
        "Deployment": {
          "Description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppName"
                },
                " Wordpress Deployment Group for ",
                {
                  "Ref": "EnvType"
                },
                " environment"
              ]
            ]
          },
          "IgnoreApplicationStopFailures": "true",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    "deploy.",
                    {
                      "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneName",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "EnvType"
                        }
                      ]
                    }
                  ]
                ]
              },
              "BundleType": "tgz",
              "Key": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppName"
                    },
                    "-",
                    {
                      "Ref": "AppVersion"
                    },
                    ".tar.gz"
                  ]
                ]
              }
            }
          }
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "wordpress"
            ]
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceIAMRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "ApplicationLogGroupAccess": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-nginx-access"
            ]
          ]
        },
        "RetentionInDays": 60
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "ApplicationLogGroupError": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-nginx-error"
            ]
          ]
        },
        "RetentionInDays": 60
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "AttachGateway": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "CPUAlarmHigh": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServerScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Scale-up if CPU > 70% for 10 minutes",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "2",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "240",
        "Statistic": "Average",
        "Threshold": "70"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CPUAlarmLow": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServerScaleDownPolicy"
          }
        ],
        "AlarmDescription": "Scale-down if CPU < 30% for 10 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "2",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "240",
        "Statistic": "Average",
        "Threshold": "30"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CloudFormationReadAndSignalPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResources",
                "cloudformation:DescribeStacks",
                "cloudformation:ListChangeSets",
                "cloudformation:ListStackResources",
                "cloudformation:ListStacks",
                "cloudformation:SignalResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "AWS::StackId"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CFNSignal"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "CloudFrontRoute53CustomRecordSet": {
      "Condition": "CloudFrontConditionDev",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "Comment": "DNS ALIAS for CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            "prd"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaChangeRoute53RecordSetFunction",
            "Arn"
          ]
        },
        "Type": "CNAME",
        "Value": {
          "Fn::GetAtt": [
            "DynamicCFDistribution",
            "DomainName"
          ]
        }
      },
      "Type": "Custom::RemoteRoute53RecordSet"
    },
    "CloudFrontStaticAssetsRoute53CustomRecordSet": {
      "Condition": "CloudFrontConditionDev",
      "Properties": {
        "Comment": "DNS ALIAS for Static Assets CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            "prd"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Ref": "EnvType"
              },
              ".",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  "prd"
                ]
              }
            ]
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaChangeRoute53RecordSetFunction",
            "Arn"
          ]
        },
        "Type": "CNAME",
        "Value": {
          "Fn::GetAtt": [
            "StaticAssetsDistribution",
            "DomainName"
          ]
        }
      },
      "Type": "Custom::RemoteRoute53RecordSet"
    },
    "CloudwatchPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CloudWatchPutPolicy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "CodeDeployServiceIAMRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.eu-west-1.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "DBEC2SecurityGroup": {
      "DependsOn": [
        "ServerSecurityGroup"
      ],
      "Properties": {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress": [
          {
            "FromPort": "3306",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ServerSecurityGroup",
                "GroupId"
              ]
            },
            "ToPort": "3306"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DBInstance": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AllocatedStorage": {
          "Fn::FindInMap": [
            "AWSRegion2Env2RDSAllocatedStorage",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "AutoMinorVersionUpgrade": true,
        "DBInstanceClass": {
          "Fn::FindInMap": [
            "AWSRegion2Env2RDSNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "DBInstanceIdentifier": {
          "Ref": "AWS::StackName"
        },
        "DBName": {
          "Fn::Join": [
            "",
            [
              "developer",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "mysql",
        "EngineVersion": "5.7",
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "developer",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "MultiAZ": {
          "Fn::If": [
            "UseDevCondition",
            false,
            true
          ]
        },
        "StorageType": "gp2",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "DBEC2SecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "Type": "AWS::RDS::DBInstance"
    },
    "DBSubnetGroup": {
      "Properties": {
        "DBSubnetGroupDescription": "RDS VPC Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::RDS::DBSubnetGroup"
    },
    "DynamicCFDNSAliasRecordSet": {
      "Condition": "CloudFrontConditionPrdStage",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "DynamicCFDistribution",
              "DomainName"
            ]
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z2FDTNDATAQYW2"
        },
        "Comment": "DNS ALIAS for the Dynamic CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "DynamicCFDistribution": {
      "Condition": "EnableCloudFrontCondition",
      "DependsOn": [
        "DBInstance",
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::FindInMap": [
                      "AWSEnv2Route53ZoneName",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "EnvType"
                      }
                    ]
                  }
                ]
              ]
            }
          ],
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Dynamic Web for ",
                {
                  "Ref": "EnvType"
                },
                " in stack ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 0,
              "ErrorCode": 500,
              "ResponseCode": "500",
              "ResponsePagePath": "/error.html"
            }
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "HEAD",
              "DELETE",
              "POST",
              "GET",
              "OPTIONS",
              "PUT",
              "PATCH"
            ],
            "CachedMethods": [
              "HEAD",
              "GET"
            ],
            "DefaultTTL": 86400,
            "ForwardedValues": {
              "Cookies": {
                "Forward": "all"
              },
              "Headers": [
                "Authorization",
                "Host"
              ],
              "QueryString": true
            },
            "MaxTTL": 31536000,
            "TargetOriginId": {
              "Fn::Join": [
                "",
                [
                  "DynamicContentOrigin",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Logging": {
            "Bucket": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "S3BucketDynamicCFLogs"
                  },
                  ".s3.amazonaws.com"
                ]
              ]
            }
          },
          "Origins": [
            {
              "CustomOriginConfig": {
                "HTTPPort": "80",
                "HTTPSPort": "443",
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2"
                ]
              },
              "DomainName": {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "DNSName"
                ]
              },
              "Id": {
                "Fn::Join": [
                  "",
                  [
                    "DynamicContentOrigin",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                ]
              }
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "cloudfront",
                {
                  "Ref": "EnvType"
                }
              ]
            },
            "SslSupportMethod": "sni-only"
          }
        }
      },
      "Type": "AWS::CloudFront::Distribution"
    },
    "EFSDescribePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeFileSystems",
                "elasticfilesystem:DescribeMountTargets"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "Stmt1479465360000"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EFSDescribe"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ElastiCacheMemcacheDNSRecordSet": {
      "Properties": {
        "Comment": "DNS CNAME for Memcache",
        "HostedZoneId": {
          "Ref": "InternalDNSZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "memcache.",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ElasticacheCluster",
              "ConfigurationEndpoint.Address"
            ]
          }
        ],
        "TTL": "60",
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "ElastiCacheSecurityGroupIngress": {
      "Properties": {
        "FromPort": "11211",
        "GroupId": {
          "Ref": "ElasticacheSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "ServerSecurityGroup"
        },
        "ToPort": "11211"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ElastiCacheSubnetGroup": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Memcache Cache Subnet Group for ",
              {
                "Ref": "AppName"
              },
              " in ",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::ElastiCache::SubnetGroup"
    },
    "ElasticLoadBalancer": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 180
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "15",
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                "443",
                "/smdw.version.php"
              ]
            ]
          },
          "Timeout": "5",
          "UnhealthyThreshold": "7"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "ElasticLoadBalancerStickinessPolicy"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "PolicyNames": [
              "ElasticLoadBalancerStickinessPolicy"
            ],
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "443",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "443",
            "PolicyNames": [
              "Mozilla-modern-2015-03",
              "ElasticLoadBalancerStickinessPolicy"
            ],
            "Protocol": "HTTPS",
            "SSLCertificateId": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "elb",
                {
                  "Ref": "EnvType"
                }
              ]
            }
          }
        ],
        "Policies": [
          {
            "Attributes": [
              {
                "Name": "Protocol-TLSv1.2",
                "Value": true
              },
              {
                "Name": "Server-Defined-Cipher-Order",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES128-GCM-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES128-GCM-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES128-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES128-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES256-GCM-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES256-GCM-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES256-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES256-SHA384",
                "Value": true
              }
            ],
            "PolicyName": "Mozilla-modern-2015-03",
            "PolicyType": "SSLNegotiationPolicyType"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "ElasticacheCluster": {
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "CacheNodeType": {
          "Fn::FindInMap": [
            "AWSRegion2Env2CacheNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "CacheSubnetGroupName": {
          "Ref": "ElastiCacheSubnetGroup"
        },
        "Engine": "memcached",
        "NotificationTopicArn": {
          "Ref": "EmailAlertSNSTopic"
        },
        "NumCacheNodes": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ElasticacheSecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "Type": "AWS::ElastiCache::CacheCluster"
    },
    "ElasticacheSecurityGroup": {
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            "",
            [
              "ElastiCache Memcache Subnet Group for ",
              {
                "Ref": "AppName"
              },
              " in ",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EmailAlertSNSTopic": {
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::Select": [
                "0",
                {
                  "Ref": "NotificationEmail"
                }
              ]
            },
            "Protocol": "email"
          },
          {
            "Endpoint": {
              "Fn::Select": [
                "1",
                {
                  "Ref": "NotificationEmail"
                }
              ]
            },
            "Protocol": "email"
          }
        ],
        "TopicName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EmailAlertTopic"
            ]
          ]
        }
      },
      "Type": "AWS::SNS::Topic"
    },
    "InboundDynamicPortsPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "400"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "54.247.104.255/32",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InternalDNSZone": {
      "Properties": {
        "HostedZoneConfig": {
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Private Zone for ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          }
        },
        "HostedZoneTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VPC"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ]
      },
      "Type": "AWS::Route53::HostedZone"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "LambdaChangeRoute53RecordSetFunction": {
      "Condition": "UseDevCondition",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "deploy.",
                {
                  "Fn::FindInMap": [
                    "AWSEnv2Route53ZoneName",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "EnvType"
                    }
                  ]
                }
              ]
            ]
          },
          "S3Key": "builds/aws-lambda-change_recordset_other_hosted_zone.zip"
        },
        "Description": "Lambda function for changing Route53 resource sets on a remote account using IAM AccessKeys",
        "Environment": {
          "Variables": {
            "AWS_ACCESS_KEY_ID_BLOB": {
              "Ref": "RemoteRoute53AccessKeyBlob"
            },
            "AWS_SECRET_ACCESS_KEY_BLOB": {
              "Ref": "RemoteRoute53SecretKeyBlob"
            }
          }
        },
        "Handler": "lambda_function.lambda_handler",
        "KmsKeyArn": {
          "Ref": "LambdaKMSArn"
        },
        "Role": {
          "Ref": "LambdaDNSRole"
        },
        "Runtime": "python2.7",
        "Timeout": "60"
      },
      "Type": "AWS::Lambda::Function"
    },
    "LoadBalancerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enables access to the ELB",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "MountTargetPublicSubnet1": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetPublicSubnet2": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetPublicSubnet3": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group for mount target",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "2049",
            "IpProtocol": "tcp",
            "ToPort": "2049"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "OutBoundDynamicPortPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutBoundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutBoundSMTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "587",
          "To": "587"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "250"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "PublicNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PublicRoute": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": "eu-west-1a",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "1.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet1NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet1RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet2": {
      "Properties": {
        "AvailabilityZone": "eu-west-1b",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "2.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet2NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet2RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet3": {
      "Properties": {
        "AvailabilityZone": "eu-west-1c",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "3.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet3NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet3RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "RDSDNSRecordSet": {
      "Properties": {
        "Comment": "DNS CNAME for RDS",
        "HostedZoneId": {
          "Ref": "InternalDNSZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "rds.",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "DBInstance",
              "Endpoint.Address"
            ]
          }
        ],
        "TTL": "60",
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "S3BucketDynamicCFLogs": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              ".logs"
            ]
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 365,
              "Id": "1 year retention",
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30
                }
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketStaticAssets": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketStaticAssetsBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketStaticAssets"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketStaticAssets"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      },
      "Type": "AWS::S3::BucketPolicy"
    },
    "S3DeployBucketAccessPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      "deploy.",
                      {
                        "Fn::FindInMap": [
                          "AWSEnv2Route53ZoneName",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "EnvType"
                          }
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                "arn:aws:s3:::aws-codedeploy-eu-west-1/*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "S3DeployBucketAccess"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "S3StaticAssetsBucketAccessKey": {
      "Properties": {
        "UserName": {
          "Ref": "S3StaticAssetsIAMUser"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "S3StaticAssetsIAMUser": {
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:ListAllMyBuckets"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketStaticAssets"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketStaticAssets"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "S3StaticAssets"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::User"
    },
	"SystemPlatformUpgradeIAM": {
      "Properties": {
        "Path": "/",
		"ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonEC2FullAccess"]
      },
      "Type": "AWS::IAM::User"
    },
    "SystemPlatformUpgradeKeys": {
      "DependsOn": [
        "SystemPlatformUpgradeIAM"
      ],
      "Properties": {
        "Status": "Active",
        "UserName": {
          "Ref": "SystemPlatformUpgradeIAM"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "SystemPlatformUpgradePolicy": {
      "DependsOn": [
        "SystemPlatformUpgradeIAM"
      ],
      "Properties": {
        "Description": "Used for system platform upgrade",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
			{
				"Effect": "Allow",
				"Action": [
					"iam:PassRole",
					"iam:GetRole"
				],
				"Resource": "*"
			},
			{
				"Effect": "Allow",
				"Action": [
					"rds:Describe*"
				],
				"Resource": "*"
			},
			{
              "Action": [
               "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResources",
                "cloudformation:GetTemplate",
                "cloudformation:ValidateTemplate",
                "cloudformation:UpdateStack"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Users": [
          {
            "Ref": "SystemPlatformUpgradeIAM"
          }
        ]
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "ServerAutoScalingGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 0,
          "Timeout": "PT5M"
        }
      },
      "DependsOn": [
        "DBInstance",
        "RDSDNSRecordSet"
      ],
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet1",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt": [
              "PublicSubnet2",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt": [
              "PublicSubnet3",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "desired"
          ]
        },
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "ServerLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "MaxSize": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "max"
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "min"
          ]
        },
        "NotificationConfigurations": [
          {
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ],
            "TopicARN": {
              "Ref": "EmailAlertSNSTopic"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "asg"
                ]
              ]
            }
          },
          {
            "Key": "Environment",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "TerminationPolicies": [
          "OldestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "2",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": "true"
        }
      }
    },
    "ServerIAMRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "ServerInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ServerLaunchConfiguration": {
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "ServerInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "EnvType"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Fn::FindInMap": [
                    "AWSRegion2Env2ServerNodeInstanceType",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "EnvType"
                    }
                  ]
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "AWSRegion2Env2ServerNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "set -eu\n",
                "# Helper function\n",
                "function error_exit {\n",
                "    cfn-signal --success false --resource ServerAutoScalingGroup --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "    exit 1\n",
                "}\n",
                "## Setup Hostname ##\n",
                "instanceID=$(curl -Ss http://instance-data/latest/meta-data/instance-id)\n",
                "hostname=\"smdw-",
                {
                  "Ref": "EnvType"
                },
                "-${instanceID#*-}\"\n",
                "hostnamectl set-hostname \"$hostname\"\n",
                "sed -i \"s/127.0.0.1 localhost/127.0.0.1 localhost $hostname/\" /etc/hosts\n",
                "\n",
                "availabilityZone=$(curl -Ss http://instance-data/latest/meta-data/placement/availability-zone)\n",
                "efsID=$(aws --region=eu-west-1 efs describe-file-systems | jq -r \".FileSystems[] | [select(.Name == \\\"",
                {
                  "Ref": "AWS::StackName"
                },
                "\\\")]\" | jq -r '.[].FileSystemId')\n",
                "efsTarget=${availabilityZone}.${efsID}.efs.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com\n",
                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2",
                "    ${efsTarget}:/ /var/www/wordpress/wp-content/blogs.dir || error_exit 'Unable to mount EFS'\n",
                "\n",
                "## Signal Success ##\n",
                "cfn-signal --resource ServerAutoScalingGroup --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ServerScaleDownPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ServerAutoScalingGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "-1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ServerScaleUpPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ServerAutoScalingGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ServerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enables HTTP access via port 80 (from ELB only) and SSH access from Resource Server",
        "SecurityGroupIngress": [
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "ToPort": "443"
          },
          {
            "CidrIp": "54.247.104.255/32",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "StaticAssetsCFDNSAliasRecordSet": {
      "Condition": "CloudFrontConditionPrdStage",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "StaticAssetsDistribution",
              "DomainName"
            ]
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z2FDTNDATAQYW2"
        },
        "Comment": "DNS ALIAS for the Static Assets CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "StaticAssetsDistribution": {
      "Condition": "EnableCloudFrontCondition",
      "DependsOn": [
        "DBInstance",
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::If": [
                      "UsePrdCondition",
                      "static.",
                      "static-"
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSEnv2Route53ZoneName",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "EnvType"
                      }
                    ]
                  }
                ]
              ]
            }
          ],
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Static assets for ",
                {
                  "Ref": "EnvType"
                },
                " in stack ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD"
            ],
            "ForwardedValues": {
              "Cookies": {
                "Forward": "none"
              },
              "QueryString": "false"
            },
            "TargetOriginId": {
              "Fn::Join": [
                "",
                [
                  "S3StaticAssetsOrigin",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Origins": [
            {
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "S3BucketStaticAssets"
                    },
                    ".s3.amazonaws.com"
                  ]
                ]
              },
              "Id": {
                "Fn::Join": [
                  "",
                  [
                    "S3StaticAssetsOrigin",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "cloudfront",
                {
                  "Ref": "EnvType"
                }
              ]
            },
            "SslSupportMethod": "sni-only"
          }
        }
      },
      "Type": "AWS::CloudFront::Distribution"
    },
    "SystemConfigDeploymentGroup": {
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationDeploy"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServerAutoScalingGroup"
          }
        ],
        "Deployment": {
          "Description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppName"
                },
                " System Config Deployment Group for ",
                {
                  "Ref": "EnvType"
                },
                " environment"
              ]
            ]
          },
          "IgnoreApplicationStopFailures": "true",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    "deploy.",
                    {
                      "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneName",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "EnvType"
                        }
                      ]
                    }
                  ]
                ]
              },
              "BundleType": "tgz",
              "Key": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppName"
                    },
                    "-config-",
                    {
                      "Ref": "AppVersion"
                    },
                    ".tar.gz"
                  ]
                ]
              }
            }
          }
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "config"
            ]
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceIAMRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "0.0/16"
            ]
          ]
        },
        "EnableDnsHostnames": "True",
        "EnableDnsSupport": "True",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "WebServerFileSystem": {
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "PerformanceMode": "generalPurpose"
      },
      "Type": "AWS::EFS::FileSystem"
    }
  }
}{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "CloudFrontConditionDev": {
      "Fn::And": [
        {
          "Condition": "UseDevCondition"
        },
        {
          "Condition": "EnableCloudFrontCondition"
        }
      ]
    },
    "CloudFrontConditionPrdStage": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Condition": "UseDevCondition"
            }
          ]
        },
        {
          "Condition": "EnableCloudFrontCondition"
        }
      ]
    },
    "EnableCloudFrontCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableCloudFront"
        },
        "yes"
      ]
    },
    "UseDevCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "dev"
      ]
    },
    "UsePrdCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "prd"
      ]
    }
  },
  "Description": "SMDW Infrastructure and application setup",
  "Mappings": {
    "AWSEnv2CidrBlockPrefix": {
      "eu-west-1": {
        "dev": "10.30",
        "prd": "10.50",
        "stage": "10.40"
      }
    },
    "AWSEnv2Route53ZoneID": {
      "eu-west-1": {
        "dev": "Z3NBKPKYJ6RJ9",
        "prd": "ZHC7VLRMIJ4EX",
        "stage": "ZHC7VLRMIJ4EX"
      }
    },
    "AWSEnv2Route53ZoneName": {
      "eu-west-1": {
        "dev": "dev.developer.sonymobile.com",
        "prd": "developer.sonymobile.com",
        "stage": "stage.developer.sonymobile.com"
      }
    },
    "AWSInstanceType2Arch": {
      "c4.large": {
        "Arch": "64HVM"
      },
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m4.large": {
        "Arch": "64HVM"
      },
      "t2.large": {
        "Arch": "64HVM"
      },
      "t2.medium": {
        "Arch": "64HVM"
      },
      "t2.micro": {
        "Arch": "64HVM"
      },
      "t2.small": {
        "Arch": "64HVM"
      }
    },
    "AWSRegion2Env2CacheNodeInstanceType": {
      "eu-west-1": {
        "dev": "cache.t2.micro",
        "prd": "cache.t2.medium",
        "stage": "cache.t2.small"
      }
    },
    "AWSRegion2Env2RDSAllocatedStorage": {
      "eu-west-1": {
        "dev": "10",
        "prd": "100",
        "stage": "10"
      }
    },
    "AWSRegion2Env2RDSNodeInstanceType": {
      "eu-west-1": {
        "dev": "db.t2.small",
        "prd": "db.m4.large",
        "stage": "db.t2.small"
      }
    },
    "AWSRegion2Env2ServerNodeInstanceType": {
      "eu-west-1": {
        "dev": "t2.micro",
        "prd": "m3.medium",
        "stage": "t2.medium"
      }
    },
    "AWSRegionArch2AMI": {
      "dev": {
        "64": "ami-41597c27",
        "64HVM": "ami-ef281d89"
      },
      "prd": {
        "64": "ami-41597c27",
        "64HVM": "ami-77dafe11"
      },
      "stage": {
        "64": "ami-41597c27",
        "64HVM": "ami-77dafe11"
      }
    },
    "Env2ASGSize": {
      "dev": {
        "desired": "2",
        "max": "3",
        "min": "2"
      },
      "prd": {
        "desired": "2",
        "max": "8",
        "min": "2"
      },
      "stage": {
        "desired": "2",
        "max": "6",
        "min": "2"
      }
    },
    "Env2CertificateARN": {
      "cloudfront": {
        "dev": "arn:aws:acm:us-east-1:834181233313:certificate/fbeb7826-1de6-4868-8945-3c1b50a533f7",
        "prd": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c",
        "stage": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c"
      },
      "elb": {
        "dev": "arn:aws:acm:eu-west-1:834181233313:certificate/729a22ea-2535-4c0e-978a-badc8a835fa7",
        "prd": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079",
        "stage": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079"
      }
    }
  },
  "Outputs": {
    "MemcacheInternalDNSName": {
      "Description": "The Internal DNS Name of the Memcache service",
      "Value": {
        "Ref": "ElastiCacheMemcacheDNSRecordSet"
      }
    },
    "RDSDNSName": {
      "Description": "The DNSName of the RDS service",
      "Value": {
        "Fn::GetAtt": [
          "DBInstance",
          "Endpoint.Address"
        ]
      }
    },
    "RDSInternalDNSName": {
      "Description": "The Internal DNS Name of the RDS service",
      "Value": {
        "Ref": "RDSDNSRecordSet"
      }
    },
	"SystemPlatformUpgradeAccessKeyID": {
      "Description": "SystemPlatformUpgradeUserAccessKey ID",
      "Value": {
        "Ref": "SystemPlatformUpgradeKeys"
      }
    },
    "SystemPlatformUpgradeUserAccessKeySecret": {
      "Description": "SystemPlatformUpgradeUserAccessKey Secret",
      "Value": {
        "Fn::GetAtt": [
          "SystemPlatformUpgradeKeys",
          "SecretAccessKey"
        ]
      }
    },
    "S3StaticAssetsBucketAccessKeyID": {
      "Description": "S3StaticAssetsBucketAccessKey ID",
      "Value": {
        "Ref": "S3StaticAssetsBucketAccessKey"
      }
    },
    "S3StaticAssetsBucketAccessKeySecret": {
      "Description": "S3StaticAssetsBucketAccessKey Secret",
      "Value": {
        "Fn::GetAtt": [
          "S3StaticAssetsBucketAccessKey",
          "SecretAccessKey"
        ]
      }
    },
    "S3StaticAssetsBucketName": {
      "Description": "The S3 Static assets bucket name",
      "Value": {
        "Ref": "S3BucketStaticAssets"
      }
    }
  },
  "Parameters": {
    "AppName": {
      "Default": "developerworld",
      "Description": "Name of the software",
      "Type": "String"
    },
    "AppVersion": {
      "Default": "latest",
      "Description": "Version of the software",
      "Type": "String"
    },
    "DBPassword": {
      "Description": "Database Password to use",
      "NoEcho": "true",
      "Type": "String"
    },
    "EnableCloudFront": {
      "AllowedValues": [
        "yes",
        "no"
      ],
      "ConstraintDescription": "must specify yes or no",
      "Default": "yes",
      "Description": "Enable CloudFront",
      "Type": "String"
    },
    "EnvType": {
      "AllowedValues": [
        "dev",
        "stage",
        "prd"
      ],
      "ConstraintDescription": "must specify dev, stage or prd",
      "Description": "Environment type.",
      "Type": "String"
    },
    "KeyName": {
      "AllowedValues": [
        "smdw-dev",
        "smdw-stage",
        "smdw-prd"
      ],
      "Description": "AWS key to use",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LambdaDNSRole": {
      "Default": "arn:aws:iam::834181233313:role/foundation-dev-LambdaCustomCloudformationRole-1ARJD5SEP39IR",
      "Description": "ARN for Custom Route53 resource (Lambda)",
      "Type": "String"
    },
    "LambdaKMSArn": {
      "Default": "arn:aws:kms:eu-west-1:834181233313:key/4e8d92d5-52d7-401a-8c9d-1232d4856515",
      "Description": "ARN for KMS Key ARN used in Lambda Custom Route53 resource",
      "Type": "String"
    },
    "NotificationEmail": {
      "Default": "dl-ww-developerprogram-infra@sonymobile.com,itpc.awsam@sonymobile.com",
      "Description": "Email Address(es) for notifications",
      "Type": "CommaDelimitedList"
    },
    "RemoteRoute53AccessKeyBlob": {
      "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAHIwcAYJKoZIhvcNAQcGoGMwYQIBADBcBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDAzkcxK0+YDPujynGwIBEIAvufcVfT0poMDu1y88jSX2srkyScVxVd1FnRRnZomb3ibC5OiBpk7EyhsQD+zrwlM=",
      "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource ACCESS_KEY",
      "Type": "String"
    },
    "RemoteRoute53SecretKeyBlob": {
      "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAIcwgYQGCSqGSIb3DQEHBqB3MHUCAQAwcAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAzNQMDNh/tR5tjBGlMCARCAQ7YkER+gcdhFrU2WErh3pYXmz/5qdmZfCYPOQGuOpjXtEzlTc9HlvvHeaLc2D1wWYlUc8gKBg4x9W3kM7s3h65KfRmQ=",
      "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource SECRET_KEY",
      "Type": "String"
    }
  },
  "Resources": {
    "ASGandELBManagementPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "autoscaling:Describe*",
                "autoscaling:EnterStandby",
                "autoscaling:ExitStandby",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:SuspendProcesses",
                "autoscaling:ResumeProcesses"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ASGandELBManagement"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "AWSCloudwatchLogsStreamPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CloudWatchLogsStream"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ApplicationDeploy": {
      "Properties": {
        "ApplicationName": {
          "Ref": "AWS::StackName"
        }
      },
      "Type": "AWS::CodeDeploy::Application"
    },
    "ApplicationDeploymentGroup": {
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationDeploy"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServerAutoScalingGroup"
          }
        ],
        "Deployment": {
          "Description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppName"
                },
                " Wordpress Deployment Group for ",
                {
                  "Ref": "EnvType"
                },
                " environment"
              ]
            ]
          },
          "IgnoreApplicationStopFailures": "true",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    "deploy.",
                    {
                      "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneName",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "EnvType"
                        }
                      ]
                    }
                  ]
                ]
              },
              "BundleType": "tgz",
              "Key": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppName"
                    },
                    "-",
                    {
                      "Ref": "AppVersion"
                    },
                    ".tar.gz"
                  ]
                ]
              }
            }
          }
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "wordpress"
            ]
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceIAMRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "ApplicationLogGroupAccess": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-nginx-access"
            ]
          ]
        },
        "RetentionInDays": 60
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "ApplicationLogGroupError": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-nginx-error"
            ]
          ]
        },
        "RetentionInDays": 60
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "AttachGateway": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "CPUAlarmHigh": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServerScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Scale-up if CPU > 70% for 10 minutes",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "2",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "240",
        "Statistic": "Average",
        "Threshold": "70"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CPUAlarmLow": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServerScaleDownPolicy"
          }
        ],
        "AlarmDescription": "Scale-down if CPU < 30% for 10 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "2",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "240",
        "Statistic": "Average",
        "Threshold": "30"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CloudFormationReadAndSignalPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResources",
                "cloudformation:DescribeStacks",
                "cloudformation:ListChangeSets",
                "cloudformation:ListStackResources",
                "cloudformation:ListStacks",
                "cloudformation:SignalResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "AWS::StackId"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CFNSignal"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "CloudFrontRoute53CustomRecordSet": {
      "Condition": "CloudFrontConditionDev",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "Comment": "DNS ALIAS for CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            "prd"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaChangeRoute53RecordSetFunction",
            "Arn"
          ]
        },
        "Type": "CNAME",
        "Value": {
          "Fn::GetAtt": [
            "DynamicCFDistribution",
            "DomainName"
          ]
        }
      },
      "Type": "Custom::RemoteRoute53RecordSet"
    },
    "CloudFrontStaticAssetsRoute53CustomRecordSet": {
      "Condition": "CloudFrontConditionDev",
      "Properties": {
        "Comment": "DNS ALIAS for Static Assets CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            "prd"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Ref": "EnvType"
              },
              ".",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  "prd"
                ]
              }
            ]
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaChangeRoute53RecordSetFunction",
            "Arn"
          ]
        },
        "Type": "CNAME",
        "Value": {
          "Fn::GetAtt": [
            "StaticAssetsDistribution",
            "DomainName"
          ]
        }
      },
      "Type": "Custom::RemoteRoute53RecordSet"
    },
    "CloudwatchPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CloudWatchPutPolicy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "CodeDeployServiceIAMRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.eu-west-1.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "DBEC2SecurityGroup": {
      "DependsOn": [
        "ServerSecurityGroup"
      ],
      "Properties": {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress": [
          {
            "FromPort": "3306",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ServerSecurityGroup",
                "GroupId"
              ]
            },
            "ToPort": "3306"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DBInstance": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AllocatedStorage": {
          "Fn::FindInMap": [
            "AWSRegion2Env2RDSAllocatedStorage",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "AutoMinorVersionUpgrade": true,
        "DBInstanceClass": {
          "Fn::FindInMap": [
            "AWSRegion2Env2RDSNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "DBInstanceIdentifier": {
          "Ref": "AWS::StackName"
        },
        "DBName": {
          "Fn::Join": [
            "",
            [
              "developer",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "mysql",
        "EngineVersion": "5.7",
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "developer",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "MultiAZ": {
          "Fn::If": [
            "UseDevCondition",
            false,
            true
          ]
        },
        "StorageType": "gp2",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "DBEC2SecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "Type": "AWS::RDS::DBInstance"
    },
    "DBSubnetGroup": {
      "Properties": {
        "DBSubnetGroupDescription": "RDS VPC Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::RDS::DBSubnetGroup"
    },
    "DynamicCFDNSAliasRecordSet": {
      "Condition": "CloudFrontConditionPrdStage",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "DynamicCFDistribution",
              "DomainName"
            ]
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z2FDTNDATAQYW2"
        },
        "Comment": "DNS ALIAS for the Dynamic CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "DynamicCFDistribution": {
      "Condition": "EnableCloudFrontCondition",
      "DependsOn": [
        "DBInstance",
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::FindInMap": [
                      "AWSEnv2Route53ZoneName",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "EnvType"
                      }
                    ]
                  }
                ]
              ]
            }
          ],
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Dynamic Web for ",
                {
                  "Ref": "EnvType"
                },
                " in stack ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 0,
              "ErrorCode": 500,
              "ResponseCode": "500",
              "ResponsePagePath": "/error.html"
            }
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "HEAD",
              "DELETE",
              "POST",
              "GET",
              "OPTIONS",
              "PUT",
              "PATCH"
            ],
            "CachedMethods": [
              "HEAD",
              "GET"
            ],
            "DefaultTTL": 86400,
            "ForwardedValues": {
              "Cookies": {
                "Forward": "all"
              },
              "Headers": [
                "Authorization",
                "Host"
              ],
              "QueryString": true
            },
            "MaxTTL": 31536000,
            "TargetOriginId": {
              "Fn::Join": [
                "",
                [
                  "DynamicContentOrigin",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Logging": {
            "Bucket": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "S3BucketDynamicCFLogs"
                  },
                  ".s3.amazonaws.com"
                ]
              ]
            }
          },
          "Origins": [
            {
              "CustomOriginConfig": {
                "HTTPPort": "80",
                "HTTPSPort": "443",
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2"
                ]
              },
              "DomainName": {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "DNSName"
                ]
              },
              "Id": {
                "Fn::Join": [
                  "",
                  [
                    "DynamicContentOrigin",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                ]
              }
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "cloudfront",
                {
                  "Ref": "EnvType"
                }
              ]
            },
            "SslSupportMethod": "sni-only"
          }
        }
      },
      "Type": "AWS::CloudFront::Distribution"
    },
    "EFSDescribePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeFileSystems",
                "elasticfilesystem:DescribeMountTargets"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "Stmt1479465360000"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EFSDescribe"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ElastiCacheMemcacheDNSRecordSet": {
      "Properties": {
        "Comment": "DNS CNAME for Memcache",
        "HostedZoneId": {
          "Ref": "InternalDNSZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "memcache.",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ElasticacheCluster",
              "ConfigurationEndpoint.Address"
            ]
          }
        ],
        "TTL": "60",
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "ElastiCacheSecurityGroupIngress": {
      "Properties": {
        "FromPort": "11211",
        "GroupId": {
          "Ref": "ElasticacheSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "ServerSecurityGroup"
        },
        "ToPort": "11211"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ElastiCacheSubnetGroup": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Memcache Cache Subnet Group for ",
              {
                "Ref": "AppName"
              },
              " in ",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::ElastiCache::SubnetGroup"
    },
    "ElasticLoadBalancer": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 180
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "15",
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                "443",
                "/smdw.version.php"
              ]
            ]
          },
          "Timeout": "5",
          "UnhealthyThreshold": "7"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "ElasticLoadBalancerStickinessPolicy"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "PolicyNames": [
              "ElasticLoadBalancerStickinessPolicy"
            ],
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "443",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "443",
            "PolicyNames": [
              "Mozilla-modern-2015-03",
              "ElasticLoadBalancerStickinessPolicy"
            ],
            "Protocol": "HTTPS",
            "SSLCertificateId": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "elb",
                {
                  "Ref": "EnvType"
                }
              ]
            }
          }
        ],
        "Policies": [
          {
            "Attributes": [
              {
                "Name": "Protocol-TLSv1.2",
                "Value": true
              },
              {
                "Name": "Server-Defined-Cipher-Order",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES128-GCM-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES128-GCM-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES128-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES128-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES256-GCM-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES256-GCM-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES256-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES256-SHA384",
                "Value": true
              }
            ],
            "PolicyName": "Mozilla-modern-2015-03",
            "PolicyType": "SSLNegotiationPolicyType"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "ElasticacheCluster": {
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "CacheNodeType": {
          "Fn::FindInMap": [
            "AWSRegion2Env2CacheNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "CacheSubnetGroupName": {
          "Ref": "ElastiCacheSubnetGroup"
        },
        "Engine": "memcached",
        "NotificationTopicArn": {
          "Ref": "EmailAlertSNSTopic"
        },
        "NumCacheNodes": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ElasticacheSecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "Type": "AWS::ElastiCache::CacheCluster"
    },
    "ElasticacheSecurityGroup": {
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            "",
            [
              "ElastiCache Memcache Subnet Group for ",
              {
                "Ref": "AppName"
              },
              " in ",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EmailAlertSNSTopic": {
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::Select": [
                "0",
                {
                  "Ref": "NotificationEmail"
                }
              ]
            },
            "Protocol": "email"
          },
          {
            "Endpoint": {
              "Fn::Select": [
                "1",
                {
                  "Ref": "NotificationEmail"
                }
              ]
            },
            "Protocol": "email"
          }
        ],
        "TopicName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EmailAlertTopic"
            ]
          ]
        }
      },
      "Type": "AWS::SNS::Topic"
    },
    "InboundDynamicPortsPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "400"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "54.247.104.255/32",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InternalDNSZone": {
      "Properties": {
        "HostedZoneConfig": {
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Private Zone for ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          }
        },
        "HostedZoneTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VPC"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ]
      },
      "Type": "AWS::Route53::HostedZone"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "LambdaChangeRoute53RecordSetFunction": {
      "Condition": "UseDevCondition",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "deploy.",
                {
                  "Fn::FindInMap": [
                    "AWSEnv2Route53ZoneName",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "EnvType"
                    }
                  ]
                }
              ]
            ]
          },
          "S3Key": "builds/aws-lambda-change_recordset_other_hosted_zone.zip"
        },
        "Description": "Lambda function for changing Route53 resource sets on a remote account using IAM AccessKeys",
        "Environment": {
          "Variables": {
            "AWS_ACCESS_KEY_ID_BLOB": {
              "Ref": "RemoteRoute53AccessKeyBlob"
            },
            "AWS_SECRET_ACCESS_KEY_BLOB": {
              "Ref": "RemoteRoute53SecretKeyBlob"
            }
          }
        },
        "Handler": "lambda_function.lambda_handler",
        "KmsKeyArn": {
          "Ref": "LambdaKMSArn"
        },
        "Role": {
          "Ref": "LambdaDNSRole"
        },
        "Runtime": "python2.7",
        "Timeout": "60"
      },
      "Type": "AWS::Lambda::Function"
    },
    "LoadBalancerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enables access to the ELB",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "MountTargetPublicSubnet1": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetPublicSubnet2": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetPublicSubnet3": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group for mount target",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "2049",
            "IpProtocol": "tcp",
            "ToPort": "2049"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "OutBoundDynamicPortPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutBoundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutBoundSMTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "587",
          "To": "587"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "250"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "PublicNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PublicRoute": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": "eu-west-1a",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "1.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet1NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet1RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet2": {
      "Properties": {
        "AvailabilityZone": "eu-west-1b",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "2.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet2NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet2RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet3": {
      "Properties": {
        "AvailabilityZone": "eu-west-1c",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "3.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet3NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet3RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "RDSDNSRecordSet": {
      "Properties": {
        "Comment": "DNS CNAME for RDS",
        "HostedZoneId": {
          "Ref": "InternalDNSZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "rds.",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "DBInstance",
              "Endpoint.Address"
            ]
          }
        ],
        "TTL": "60",
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "S3BucketDynamicCFLogs": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              ".logs"
            ]
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 365,
              "Id": "1 year retention",
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30
                }
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketStaticAssets": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketStaticAssetsBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketStaticAssets"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketStaticAssets"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      },
      "Type": "AWS::S3::BucketPolicy"
    },
    "S3DeployBucketAccessPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      "deploy.",
                      {
                        "Fn::FindInMap": [
                          "AWSEnv2Route53ZoneName",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "EnvType"
                          }
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                "arn:aws:s3:::aws-codedeploy-eu-west-1/*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "S3DeployBucketAccess"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "S3StaticAssetsBucketAccessKey": {
      "Properties": {
        "UserName": {
          "Ref": "S3StaticAssetsIAMUser"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "S3StaticAssetsIAMUser": {
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:ListAllMyBuckets"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketStaticAssets"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketStaticAssets"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "S3StaticAssets"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::User"
    },
	"SystemPlatformUpgradeIAM": {
      "Properties": {
        "Path": "/",
		"ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonEC2FullAccess"]
      },
      "Type": "AWS::IAM::User"
    },
    "SystemPlatformUpgradeKeys": {
      "DependsOn": [
        "SystemPlatformUpgradeIAM"
      ],
      "Properties": {
        "Status": "Active",
        "UserName": {
          "Ref": "SystemPlatformUpgradeIAM"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "SystemPlatformUpgradePolicy": {
      "DependsOn": [
        "SystemPlatformUpgradeIAM"
      ],
      "Properties": {
        "Description": "Used for system platform upgrade",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
			{
				"Effect": "Allow",
				"Action": [
					"iam:PassRole",
					"iam:GetRole"
				],
				"Resource": "*"
			},
			{
				"Effect": "Allow",
				"Action": [
					"rds:Describe*"
				],
				"Resource": "*"
			},
			{
              "Action": [
               "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResources",
                "cloudformation:GetTemplate",
                "cloudformation:ValidateTemplate",
                "cloudformation:UpdateStack"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Users": [
          {
            "Ref": "SystemPlatformUpgradeIAM"
          }
        ]
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "ServerAutoScalingGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 0,
          "Timeout": "PT5M"
        }
      },
      "DependsOn": [
        "DBInstance",
        "RDSDNSRecordSet"
      ],
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet1",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt": [
              "PublicSubnet2",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt": [
              "PublicSubnet3",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "desired"
          ]
        },
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "ServerLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "MaxSize": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "max"
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "min"
          ]
        },
        "NotificationConfigurations": [
          {
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ],
            "TopicARN": {
              "Ref": "EmailAlertSNSTopic"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "asg"
                ]
              ]
            }
          },
          {
            "Key": "Environment",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "TerminationPolicies": [
          "OldestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "2",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": "true"
        }
      }
    },
    "ServerIAMRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "ServerInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ServerLaunchConfiguration": {
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "ServerInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "EnvType"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Fn::FindInMap": [
                    "AWSRegion2Env2ServerNodeInstanceType",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "EnvType"
                    }
                  ]
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "AWSRegion2Env2ServerNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "set -eu\n",
                "# Helper function\n",
                "function error_exit {\n",
                "    cfn-signal --success false --resource ServerAutoScalingGroup --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "    exit 1\n",
                "}\n",
                "## Setup Hostname ##\n",
                "instanceID=$(curl -Ss http://instance-data/latest/meta-data/instance-id)\n",
                "hostname=\"smdw-",
                {
                  "Ref": "EnvType"
                },
                "-${instanceID#*-}\"\n",
                "hostnamectl set-hostname \"$hostname\"\n",
                "sed -i \"s/127.0.0.1 localhost/127.0.0.1 localhost $hostname/\" /etc/hosts\n",
                "\n",
                "availabilityZone=$(curl -Ss http://instance-data/latest/meta-data/placement/availability-zone)\n",
                "efsID=$(aws --region=eu-west-1 efs describe-file-systems | jq -r \".FileSystems[] | [select(.Name == \\\"",
                {
                  "Ref": "AWS::StackName"
                },
                "\\\")]\" | jq -r '.[].FileSystemId')\n",
                "efsTarget=${availabilityZone}.${efsID}.efs.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com\n",
                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2",
                "    ${efsTarget}:/ /var/www/wordpress/wp-content/blogs.dir || error_exit 'Unable to mount EFS'\n",
                "\n",
                "## Signal Success ##\n",
                "cfn-signal --resource ServerAutoScalingGroup --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ServerScaleDownPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ServerAutoScalingGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "-1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ServerScaleUpPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ServerAutoScalingGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ServerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enables HTTP access via port 80 (from ELB only) and SSH access from Resource Server",
        "SecurityGroupIngress": [
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "ToPort": "443"
          },
          {
            "CidrIp": "54.247.104.255/32",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "StaticAssetsCFDNSAliasRecordSet": {
      "Condition": "CloudFrontConditionPrdStage",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "StaticAssetsDistribution",
              "DomainName"
            ]
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z2FDTNDATAQYW2"
        },
        "Comment": "DNS ALIAS for the Static Assets CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "StaticAssetsDistribution": {
      "Condition": "EnableCloudFrontCondition",
      "DependsOn": [
        "DBInstance",
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::If": [
                      "UsePrdCondition",
                      "static.",
                      "static-"
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSEnv2Route53ZoneName",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "EnvType"
                      }
                    ]
                  }
                ]
              ]
            }
          ],
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Static assets for ",
                {
                  "Ref": "EnvType"
                },
                " in stack ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD"
            ],
            "ForwardedValues": {
              "Cookies": {
                "Forward": "none"
              },
              "QueryString": "false"
            },
            "TargetOriginId": {
              "Fn::Join": [
                "",
                [
                  "S3StaticAssetsOrigin",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Origins": [
            {
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "S3BucketStaticAssets"
                    },
                    ".s3.amazonaws.com"
                  ]
                ]
              },
              "Id": {
                "Fn::Join": [
                  "",
                  [
                    "S3StaticAssetsOrigin",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "cloudfront",
                {
                  "Ref": "EnvType"
                }
              ]
            },
            "SslSupportMethod": "sni-only"
          }
        }
      },
      "Type": "AWS::CloudFront::Distribution"
    },
    "SystemConfigDeploymentGroup": {
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationDeploy"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServerAutoScalingGroup"
          }
        ],
        "Deployment": {
          "Description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppName"
                },
                " System Config Deployment Group for ",
                {
                  "Ref": "EnvType"
                },
                " environment"
              ]
            ]
          },
          "IgnoreApplicationStopFailures": "true",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    "deploy.",
                    {
                      "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneName",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "EnvType"
                        }
                      ]
                    }
                  ]
                ]
              },
              "BundleType": "tgz",
              "Key": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppName"
                    },
                    "-config-",
                    {
                      "Ref": "AppVersion"
                    },
                    ".tar.gz"
                  ]
                ]
              }
            }
          }
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "config"
            ]
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceIAMRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "0.0/16"
            ]
          ]
        },
        "EnableDnsHostnames": "True",
        "EnableDnsSupport": "True",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "WebServerFileSystem": {
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "PerformanceMode": "generalPurpose"
      },
      "Type": "AWS::EFS::FileSystem"
    }
  }
}{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "CloudFrontConditionDev": {
      "Fn::And": [
        {
          "Condition": "UseDevCondition"
        },
        {
          "Condition": "EnableCloudFrontCondition"
        }
      ]
    },
    "CloudFrontConditionPrdStage": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Condition": "UseDevCondition"
            }
          ]
        },
        {
          "Condition": "EnableCloudFrontCondition"
        }
      ]
    },
    "EnableCloudFrontCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableCloudFront"
        },
        "yes"
      ]
    },
    "UseDevCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "dev"
      ]
    },
    "UsePrdCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "prd"
      ]
    }
  },
  "Description": "SMDW Infrastructure and application setup",
  "Mappings": {
    "AWSEnv2CidrBlockPrefix": {
      "eu-west-1": {
        "dev": "10.30",
        "prd": "10.50",
        "stage": "10.40"
      }
    },
    "AWSEnv2Route53ZoneID": {
      "eu-west-1": {
        "dev": "Z3NBKPKYJ6RJ9",
        "prd": "ZHC7VLRMIJ4EX",
        "stage": "ZHC7VLRMIJ4EX"
      }
    },
    "AWSEnv2Route53ZoneName": {
      "eu-west-1": {
        "dev": "dev.developer.sonymobile.com",
        "prd": "developer.sonymobile.com",
        "stage": "stage.developer.sonymobile.com"
      }
    },
    "AWSInstanceType2Arch": {
      "c4.large": {
        "Arch": "64HVM"
      },
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m4.large": {
        "Arch": "64HVM"
      },
      "t2.large": {
        "Arch": "64HVM"
      },
      "t2.medium": {
        "Arch": "64HVM"
      },
      "t2.micro": {
        "Arch": "64HVM"
      },
      "t2.small": {
        "Arch": "64HVM"
      }
    },
    "AWSRegion2Env2CacheNodeInstanceType": {
      "eu-west-1": {
        "dev": "cache.t2.micro",
        "prd": "cache.t2.medium",
        "stage": "cache.t2.small"
      }
    },
    "AWSRegion2Env2RDSAllocatedStorage": {
      "eu-west-1": {
        "dev": "10",
        "prd": "100",
        "stage": "10"
      }
    },
    "AWSRegion2Env2RDSNodeInstanceType": {
      "eu-west-1": {
        "dev": "db.t2.small",
        "prd": "db.m4.large",
        "stage": "db.t2.small"
      }
    },
    "AWSRegion2Env2ServerNodeInstanceType": {
      "eu-west-1": {
        "dev": "t2.micro",
        "prd": "m3.medium",
        "stage": "t2.medium"
      }
    },
    "AWSRegionArch2AMI": {
      "dev": {
        "64": "ami-41597c27",
        "64HVM": "ami-ef281d89"
      },
      "prd": {
        "64": "ami-41597c27",
        "64HVM": "ami-77dafe11"
      },
      "stage": {
        "64": "ami-41597c27",
        "64HVM": "ami-77dafe11"
      }
    },
    "Env2ASGSize": {
      "dev": {
        "desired": "2",
        "max": "3",
        "min": "2"
      },
      "prd": {
        "desired": "2",
        "max": "8",
        "min": "2"
      },
      "stage": {
        "desired": "2",
        "max": "6",
        "min": "2"
      }
    },
    "Env2CertificateARN": {
      "cloudfront": {
        "dev": "arn:aws:acm:us-east-1:834181233313:certificate/fbeb7826-1de6-4868-8945-3c1b50a533f7",
        "prd": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c",
        "stage": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c"
      },
      "elb": {
        "dev": "arn:aws:acm:eu-west-1:834181233313:certificate/729a22ea-2535-4c0e-978a-badc8a835fa7",
        "prd": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079",
        "stage": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079"
      }
    }
  },
  "Outputs": {
    "MemcacheInternalDNSName": {
      "Description": "The Internal DNS Name of the Memcache service",
      "Value": {
        "Ref": "ElastiCacheMemcacheDNSRecordSet"
      }
    },
    "RDSDNSName": {
      "Description": "The DNSName of the RDS service",
      "Value": {
        "Fn::GetAtt": [
          "DBInstance",
          "Endpoint.Address"
        ]
      }
    },
    "RDSInternalDNSName": {
      "Description": "The Internal DNS Name of the RDS service",
      "Value": {
        "Ref": "RDSDNSRecordSet"
      }
    },
	"SystemPlatformUpgradeAccessKeyID": {
      "Description": "SystemPlatformUpgradeUserAccessKey ID",
      "Value": {
        "Ref": "SystemPlatformUpgradeKeys"
      }
    },
    "SystemPlatformUpgradeUserAccessKeySecret": {
      "Description": "SystemPlatformUpgradeUserAccessKey Secret",
      "Value": {
        "Fn::GetAtt": [
          "SystemPlatformUpgradeKeys",
          "SecretAccessKey"
        ]
      }
    },
    "S3StaticAssetsBucketAccessKeyID": {
      "Description": "S3StaticAssetsBucketAccessKey ID",
      "Value": {
        "Ref": "S3StaticAssetsBucketAccessKey"
      }
    },
    "S3StaticAssetsBucketAccessKeySecret": {
      "Description": "S3StaticAssetsBucketAccessKey Secret",
      "Value": {
        "Fn::GetAtt": [
          "S3StaticAssetsBucketAccessKey",
          "SecretAccessKey"
        ]
      }
    },
    "S3StaticAssetsBucketName": {
      "Description": "The S3 Static assets bucket name",
      "Value": {
        "Ref": "S3BucketStaticAssets"
      }
    }
  },
  "Parameters": {
    "AppName": {
      "Default": "developerworld",
      "Description": "Name of the software",
      "Type": "String"
    },
    "AppVersion": {
      "Default": "latest",
      "Description": "Version of the software",
      "Type": "String"
    },
    "DBPassword": {
      "Description": "Database Password to use",
      "NoEcho": "true",
      "Type": "String"
    },
    "EnableCloudFront": {
      "AllowedValues": [
        "yes",
        "no"
      ],
      "ConstraintDescription": "must specify yes or no",
      "Default": "yes",
      "Description": "Enable CloudFront",
      "Type": "String"
    },
    "EnvType": {
      "AllowedValues": [
        "dev",
        "stage",
        "prd"
      ],
      "ConstraintDescription": "must specify dev, stage or prd",
      "Description": "Environment type.",
      "Type": "String"
    },
    "KeyName": {
      "AllowedValues": [
        "smdw-dev",
        "smdw-stage",
        "smdw-prd"
      ],
      "Description": "AWS key to use",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LambdaDNSRole": {
      "Default": "arn:aws:iam::834181233313:role/foundation-dev-LambdaCustomCloudformationRole-1ARJD5SEP39IR",
      "Description": "ARN for Custom Route53 resource (Lambda)",
      "Type": "String"
    },
    "LambdaKMSArn": {
      "Default": "arn:aws:kms:eu-west-1:834181233313:key/4e8d92d5-52d7-401a-8c9d-1232d4856515",
      "Description": "ARN for KMS Key ARN used in Lambda Custom Route53 resource",
      "Type": "String"
    },
    "NotificationEmail": {
      "Default": "dl-ww-developerprogram-infra@sonymobile.com,itpc.awsam@sonymobile.com",
      "Description": "Email Address(es) for notifications",
      "Type": "CommaDelimitedList"
    },
    "RemoteRoute53AccessKeyBlob": {
      "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAHIwcAYJKoZIhvcNAQcGoGMwYQIBADBcBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDAzkcxK0+YDPujynGwIBEIAvufcVfT0poMDu1y88jSX2srkyScVxVd1FnRRnZomb3ibC5OiBpk7EyhsQD+zrwlM=",
      "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource ACCESS_KEY",
      "Type": "String"
    },
    "RemoteRoute53SecretKeyBlob": {
      "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAIcwgYQGCSqGSIb3DQEHBqB3MHUCAQAwcAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAzNQMDNh/tR5tjBGlMCARCAQ7YkER+gcdhFrU2WErh3pYXmz/5qdmZfCYPOQGuOpjXtEzlTc9HlvvHeaLc2D1wWYlUc8gKBg4x9W3kM7s3h65KfRmQ=",
      "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource SECRET_KEY",
      "Type": "String"
    }
  },
  "Resources": {
    "ASGandELBManagementPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "autoscaling:Describe*",
                "autoscaling:EnterStandby",
                "autoscaling:ExitStandby",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:SuspendProcesses",
                "autoscaling:ResumeProcesses"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ASGandELBManagement"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "AWSCloudwatchLogsStreamPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CloudWatchLogsStream"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ApplicationDeploy": {
      "Properties": {
        "ApplicationName": {
          "Ref": "AWS::StackName"
        }
      },
      "Type": "AWS::CodeDeploy::Application"
    },
    "ApplicationDeploymentGroup": {
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationDeploy"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServerAutoScalingGroup"
          }
        ],
        "Deployment": {
          "Description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppName"
                },
                " Wordpress Deployment Group for ",
                {
                  "Ref": "EnvType"
                },
                " environment"
              ]
            ]
          },
          "IgnoreApplicationStopFailures": "true",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    "deploy.",
                    {
                      "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneName",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "EnvType"
                        }
                      ]
                    }
                  ]
                ]
              },
              "BundleType": "tgz",
              "Key": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppName"
                    },
                    "-",
                    {
                      "Ref": "AppVersion"
                    },
                    ".tar.gz"
                  ]
                ]
              }
            }
          }
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "wordpress"
            ]
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceIAMRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "ApplicationLogGroupAccess": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-nginx-access"
            ]
          ]
        },
        "RetentionInDays": 60
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "ApplicationLogGroupError": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-nginx-error"
            ]
          ]
        },
        "RetentionInDays": 60
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "AttachGateway": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "CPUAlarmHigh": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServerScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Scale-up if CPU > 70% for 10 minutes",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "2",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "240",
        "Statistic": "Average",
        "Threshold": "70"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CPUAlarmLow": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServerScaleDownPolicy"
          }
        ],
        "AlarmDescription": "Scale-down if CPU < 30% for 10 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "2",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "240",
        "Statistic": "Average",
        "Threshold": "30"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CloudFormationReadAndSignalPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResources",
                "cloudformation:DescribeStacks",
                "cloudformation:ListChangeSets",
                "cloudformation:ListStackResources",
                "cloudformation:ListStacks",
                "cloudformation:SignalResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "AWS::StackId"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CFNSignal"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "CloudFrontRoute53CustomRecordSet": {
      "Condition": "CloudFrontConditionDev",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "Comment": "DNS ALIAS for CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            "prd"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaChangeRoute53RecordSetFunction",
            "Arn"
          ]
        },
        "Type": "CNAME",
        "Value": {
          "Fn::GetAtt": [
            "DynamicCFDistribution",
            "DomainName"
          ]
        }
      },
      "Type": "Custom::RemoteRoute53RecordSet"
    },
    "CloudFrontStaticAssetsRoute53CustomRecordSet": {
      "Condition": "CloudFrontConditionDev",
      "Properties": {
        "Comment": "DNS ALIAS for Static Assets CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            "prd"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Ref": "EnvType"
              },
              ".",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  "prd"
                ]
              }
            ]
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaChangeRoute53RecordSetFunction",
            "Arn"
          ]
        },
        "Type": "CNAME",
        "Value": {
          "Fn::GetAtt": [
            "StaticAssetsDistribution",
            "DomainName"
          ]
        }
      },
      "Type": "Custom::RemoteRoute53RecordSet"
    },
    "CloudwatchPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CloudWatchPutPolicy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "CodeDeployServiceIAMRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.eu-west-1.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "DBEC2SecurityGroup": {
      "DependsOn": [
        "ServerSecurityGroup"
      ],
      "Properties": {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress": [
          {
            "FromPort": "3306",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ServerSecurityGroup",
                "GroupId"
              ]
            },
            "ToPort": "3306"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DBInstance": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AllocatedStorage": {
          "Fn::FindInMap": [
            "AWSRegion2Env2RDSAllocatedStorage",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "AutoMinorVersionUpgrade": true,
        "DBInstanceClass": {
          "Fn::FindInMap": [
            "AWSRegion2Env2RDSNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "DBInstanceIdentifier": {
          "Ref": "AWS::StackName"
        },
        "DBName": {
          "Fn::Join": [
            "",
            [
              "developer",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "mysql",
        "EngineVersion": "5.7",
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "developer",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "MultiAZ": {
          "Fn::If": [
            "UseDevCondition",
            false,
            true
          ]
        },
        "StorageType": "gp2",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "DBEC2SecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "Type": "AWS::RDS::DBInstance"
    },
    "DBSubnetGroup": {
      "Properties": {
        "DBSubnetGroupDescription": "RDS VPC Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::RDS::DBSubnetGroup"
    },
    "DynamicCFDNSAliasRecordSet": {
      "Condition": "CloudFrontConditionPrdStage",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "DynamicCFDistribution",
              "DomainName"
            ]
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z2FDTNDATAQYW2"
        },
        "Comment": "DNS ALIAS for the Dynamic CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "DynamicCFDistribution": {
      "Condition": "EnableCloudFrontCondition",
      "DependsOn": [
        "DBInstance",
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::FindInMap": [
                      "AWSEnv2Route53ZoneName",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "EnvType"
                      }
                    ]
                  }
                ]
              ]
            }
          ],
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Dynamic Web for ",
                {
                  "Ref": "EnvType"
                },
                " in stack ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 0,
              "ErrorCode": 500,
              "ResponseCode": "500",
              "ResponsePagePath": "/error.html"
            }
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "HEAD",
              "DELETE",
              "POST",
              "GET",
              "OPTIONS",
              "PUT",
              "PATCH"
            ],
            "CachedMethods": [
              "HEAD",
              "GET"
            ],
            "DefaultTTL": 86400,
            "ForwardedValues": {
              "Cookies": {
                "Forward": "all"
              },
              "Headers": [
                "Authorization",
                "Host"
              ],
              "QueryString": true
            },
            "MaxTTL": 31536000,
            "TargetOriginId": {
              "Fn::Join": [
                "",
                [
                  "DynamicContentOrigin",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Logging": {
            "Bucket": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "S3BucketDynamicCFLogs"
                  },
                  ".s3.amazonaws.com"
                ]
              ]
            }
          },
          "Origins": [
            {
              "CustomOriginConfig": {
                "HTTPPort": "80",
                "HTTPSPort": "443",
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2"
                ]
              },
              "DomainName": {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "DNSName"
                ]
              },
              "Id": {
                "Fn::Join": [
                  "",
                  [
                    "DynamicContentOrigin",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                ]
              }
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "cloudfront",
                {
                  "Ref": "EnvType"
                }
              ]
            },
            "SslSupportMethod": "sni-only"
          }
        }
      },
      "Type": "AWS::CloudFront::Distribution"
    },
    "EFSDescribePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeFileSystems",
                "elasticfilesystem:DescribeMountTargets"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "Stmt1479465360000"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EFSDescribe"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ElastiCacheMemcacheDNSRecordSet": {
      "Properties": {
        "Comment": "DNS CNAME for Memcache",
        "HostedZoneId": {
          "Ref": "InternalDNSZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "memcache.",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ElasticacheCluster",
              "ConfigurationEndpoint.Address"
            ]
          }
        ],
        "TTL": "60",
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "ElastiCacheSecurityGroupIngress": {
      "Properties": {
        "FromPort": "11211",
        "GroupId": {
          "Ref": "ElasticacheSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "ServerSecurityGroup"
        },
        "ToPort": "11211"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ElastiCacheSubnetGroup": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Memcache Cache Subnet Group for ",
              {
                "Ref": "AppName"
              },
              " in ",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::ElastiCache::SubnetGroup"
    },
    "ElasticLoadBalancer": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 180
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "15",
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                "443",
                "/smdw.version.php"
              ]
            ]
          },
          "Timeout": "5",
          "UnhealthyThreshold": "7"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "ElasticLoadBalancerStickinessPolicy"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "PolicyNames": [
              "ElasticLoadBalancerStickinessPolicy"
            ],
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "443",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "443",
            "PolicyNames": [
              "Mozilla-modern-2015-03",
              "ElasticLoadBalancerStickinessPolicy"
            ],
            "Protocol": "HTTPS",
            "SSLCertificateId": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "elb",
                {
                  "Ref": "EnvType"
                }
              ]
            }
          }
        ],
        "Policies": [
          {
            "Attributes": [
              {
                "Name": "Protocol-TLSv1.2",
                "Value": true
              },
              {
                "Name": "Server-Defined-Cipher-Order",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES128-GCM-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES128-GCM-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES128-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES128-SHA256",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES256-GCM-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES256-GCM-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-ECDSA-AES256-SHA384",
                "Value": true
              },
              {
                "Name": "ECDHE-RSA-AES256-SHA384",
                "Value": true
              }
            ],
            "PolicyName": "Mozilla-modern-2015-03",
            "PolicyType": "SSLNegotiationPolicyType"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "ElasticacheCluster": {
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "CacheNodeType": {
          "Fn::FindInMap": [
            "AWSRegion2Env2CacheNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "CacheSubnetGroupName": {
          "Ref": "ElastiCacheSubnetGroup"
        },
        "Engine": "memcached",
        "NotificationTopicArn": {
          "Ref": "EmailAlertSNSTopic"
        },
        "NumCacheNodes": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ElasticacheSecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "Type": "AWS::ElastiCache::CacheCluster"
    },
    "ElasticacheSecurityGroup": {
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            "",
            [
              "ElastiCache Memcache Subnet Group for ",
              {
                "Ref": "AppName"
              },
              " in ",
              {
                "Ref": "EnvType"
              }
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EmailAlertSNSTopic": {
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::Select": [
                "0",
                {
                  "Ref": "NotificationEmail"
                }
              ]
            },
            "Protocol": "email"
          },
          {
            "Endpoint": {
              "Fn::Select": [
                "1",
                {
                  "Ref": "NotificationEmail"
                }
              ]
            },
            "Protocol": "email"
          }
        ],
        "TopicName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EmailAlertTopic"
            ]
          ]
        }
      },
      "Type": "AWS::SNS::Topic"
    },
    "InboundDynamicPortsPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "400"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "54.247.104.255/32",
        "Egress": "false",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InternalDNSZone": {
      "Properties": {
        "HostedZoneConfig": {
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Private Zone for ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          }
        },
        "HostedZoneTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VPC"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ]
      },
      "Type": "AWS::Route53::HostedZone"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "LambdaChangeRoute53RecordSetFunction": {
      "Condition": "UseDevCondition",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "deploy.",
                {
                  "Fn::FindInMap": [
                    "AWSEnv2Route53ZoneName",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "EnvType"
                    }
                  ]
                }
              ]
            ]
          },
          "S3Key": "builds/aws-lambda-change_recordset_other_hosted_zone.zip"
        },
        "Description": "Lambda function for changing Route53 resource sets on a remote account using IAM AccessKeys",
        "Environment": {
          "Variables": {
            "AWS_ACCESS_KEY_ID_BLOB": {
              "Ref": "RemoteRoute53AccessKeyBlob"
            },
            "AWS_SECRET_ACCESS_KEY_BLOB": {
              "Ref": "RemoteRoute53SecretKeyBlob"
            }
          }
        },
        "Handler": "lambda_function.lambda_handler",
        "KmsKeyArn": {
          "Ref": "LambdaKMSArn"
        },
        "Role": {
          "Ref": "LambdaDNSRole"
        },
        "Runtime": "python2.7",
        "Timeout": "60"
      },
      "Type": "AWS::Lambda::Function"
    },
    "LoadBalancerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enables access to the ELB",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "MountTargetPublicSubnet1": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetPublicSubnet2": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetPublicSubnet3": {
      "Properties": {
        "FileSystemId": {
          "Ref": "WebServerFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "MountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EFS::MountTarget"
    },
    "MountTargetSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group for mount target",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "2049",
            "IpProtocol": "tcp",
            "ToPort": "2049"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "OutBoundDynamicPortPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutBoundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutBoundSMTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "587",
          "To": "587"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "250"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "PublicNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PublicRoute": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": "eu-west-1a",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "1.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet1NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet1RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet2": {
      "Properties": {
        "AvailabilityZone": "eu-west-1b",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "2.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet2NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet2RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet3": {
      "Properties": {
        "AvailabilityZone": "eu-west-1c",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "3.0/24"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet3NetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnet3RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "RDSDNSRecordSet": {
      "Properties": {
        "Comment": "DNS CNAME for RDS",
        "HostedZoneId": {
          "Ref": "InternalDNSZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "rds.",
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "DBInstance",
              "Endpoint.Address"
            ]
          }
        ],
        "TTL": "60",
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "S3BucketDynamicCFLogs": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              ".logs"
            ]
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 365,
              "Id": "1 year retention",
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30
                }
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketStaticAssets": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketStaticAssetsBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketStaticAssets"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketStaticAssets"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      },
      "Type": "AWS::S3::BucketPolicy"
    },
    "S3DeployBucketAccessPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      "deploy.",
                      {
                        "Fn::FindInMap": [
                          "AWSEnv2Route53ZoneName",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "EnvType"
                          }
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                "arn:aws:s3:::aws-codedeploy-eu-west-1/*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "S3DeployBucketAccess"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "S3StaticAssetsBucketAccessKey": {
      "Properties": {
        "UserName": {
          "Ref": "S3StaticAssetsIAMUser"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "S3StaticAssetsIAMUser": {
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:ListAllMyBuckets"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketStaticAssets"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketStaticAssets"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "S3StaticAssets"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::User"
    },
	"SystemPlatformUpgradeIAM": {
      "Properties": {
        "Path": "/",
		"ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonEC2FullAccess"]
      },
      "Type": "AWS::IAM::User"
    },
    "SystemPlatformUpgradeKeys": {
      "DependsOn": [
        "SystemPlatformUpgradeIAM"
      ],
      "Properties": {
        "Status": "Active",
        "UserName": {
          "Ref": "SystemPlatformUpgradeIAM"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "SystemPlatformUpgradePolicy": {
      "DependsOn": [
        "SystemPlatformUpgradeIAM"
      ],
      "Properties": {
        "Description": "Used for system platform upgrade",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
			{
				"Effect": "Allow",
				"Action": [
					"iam:PassRole",
					"iam:GetRole"
				],
				"Resource": "*"
			},
			{
				"Effect": "Allow",
				"Action": [
					"rds:Describe*"
				],
				"Resource": "*"
			},
			{
              "Action": [
               "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResources",
                "cloudformation:GetTemplate",
                "cloudformation:ValidateTemplate",
                "cloudformation:UpdateStack"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Users": [
          {
            "Ref": "SystemPlatformUpgradeIAM"
          }
        ]
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "ServerAutoScalingGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 0,
          "Timeout": "PT5M"
        }
      },
      "DependsOn": [
        "DBInstance",
        "RDSDNSRecordSet"
      ],
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet1",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt": [
              "PublicSubnet2",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt": [
              "PublicSubnet3",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "desired"
          ]
        },
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "ServerLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "MaxSize": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "max"
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": {
          "Fn::FindInMap": [
            "Env2ASGSize",
            {
              "Ref": "EnvType"
            },
            "min"
          ]
        },
        "NotificationConfigurations": [
          {
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ],
            "TopicARN": {
              "Ref": "EmailAlertSNSTopic"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "asg"
                ]
              ]
            }
          },
          {
            "Key": "Environment",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "TerminationPolicies": [
          "OldestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          },
          {
            "Ref": "PublicSubnet3"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "2",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": "true"
        }
      }
    },
    "ServerIAMRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "ServerInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServerIAMRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ServerLaunchConfiguration": {
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "ServerInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "EnvType"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Fn::FindInMap": [
                    "AWSRegion2Env2ServerNodeInstanceType",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "EnvType"
                    }
                  ]
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "AWSRegion2Env2ServerNodeInstanceType",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "set -eu\n",
                "# Helper function\n",
                "function error_exit {\n",
                "    cfn-signal --success false --resource ServerAutoScalingGroup --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "    exit 1\n",
                "}\n",
                "## Setup Hostname ##\n",
                "instanceID=$(curl -Ss http://instance-data/latest/meta-data/instance-id)\n",
                "hostname=\"smdw-",
                {
                  "Ref": "EnvType"
                },
                "-${instanceID#*-}\"\n",
                "hostnamectl set-hostname \"$hostname\"\n",
                "sed -i \"s/127.0.0.1 localhost/127.0.0.1 localhost $hostname/\" /etc/hosts\n",
                "\n",
                "availabilityZone=$(curl -Ss http://instance-data/latest/meta-data/placement/availability-zone)\n",
                "efsID=$(aws --region=eu-west-1 efs describe-file-systems | jq -r \".FileSystems[] | [select(.Name == \\\"",
                {
                  "Ref": "AWS::StackName"
                },
                "\\\")]\" | jq -r '.[].FileSystemId')\n",
                "efsTarget=${availabilityZone}.${efsID}.efs.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com\n",
                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2",
                "    ${efsTarget}:/ /var/www/wordpress/wp-content/blogs.dir || error_exit 'Unable to mount EFS'\n",
                "\n",
                "## Signal Success ##\n",
                "cfn-signal --resource ServerAutoScalingGroup --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ServerScaleDownPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ServerAutoScalingGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "-1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ServerScaleUpPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ServerAutoScalingGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ServerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enables HTTP access via port 80 (from ELB only) and SSH access from Resource Server",
        "SecurityGroupIngress": [
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "ToPort": "443"
          },
          {
            "CidrIp": "54.247.104.255/32",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "StaticAssetsCFDNSAliasRecordSet": {
      "Condition": "CloudFrontConditionPrdStage",
      "DependsOn": [
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "StaticAssetsDistribution",
              "DomainName"
            ]
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z2FDTNDATAQYW2"
        },
        "Comment": "DNS ALIAS for the Static Assets CloudFront Distribution",
        "HostedZoneId": {
          "Fn::FindInMap": [
            "AWSEnv2Route53ZoneID",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "EnvType"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UsePrdCondition",
                  "static.",
                  "static-"
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSEnv2Route53ZoneName",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "StaticAssetsDistribution": {
      "Condition": "EnableCloudFrontCondition",
      "DependsOn": [
        "DBInstance",
        "ElasticLoadBalancer"
      ],
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::If": [
                      "UsePrdCondition",
                      "static.",
                      "static-"
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSEnv2Route53ZoneName",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "EnvType"
                      }
                    ]
                  }
                ]
              ]
            }
          ],
          "Comment": {
            "Fn::Join": [
              "",
              [
                "Static assets for ",
                {
                  "Ref": "EnvType"
                },
                " in stack ",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD"
            ],
            "ForwardedValues": {
              "Cookies": {
                "Forward": "none"
              },
              "QueryString": "false"
            },
            "TargetOriginId": {
              "Fn::Join": [
                "",
                [
                  "S3StaticAssetsOrigin",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Origins": [
            {
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "S3BucketStaticAssets"
                    },
                    ".s3.amazonaws.com"
                  ]
                ]
              },
              "Id": {
                "Fn::Join": [
                  "",
                  [
                    "S3StaticAssetsOrigin",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::FindInMap": [
                "Env2CertificateARN",
                "cloudfront",
                {
                  "Ref": "EnvType"
                }
              ]
            },
            "SslSupportMethod": "sni-only"
          }
        }
      },
      "Type": "AWS::CloudFront::Distribution"
    },
    "SystemConfigDeploymentGroup": {
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationDeploy"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServerAutoScalingGroup"
          }
        ],
        "Deployment": {
          "Description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppName"
                },
                " System Config Deployment Group for ",
                {
                  "Ref": "EnvType"
                },
                " environment"
              ]
            ]
          },
          "IgnoreApplicationStopFailures": "true",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {
                "Fn::Join": [
                  "",
                  [
                    "deploy.",
                    {
                      "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneName",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "EnvType"
                        }
                      ]
                    }
                  ]
                ]
              },
              "BundleType": "tgz",
              "Key": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppName"
                    },
                    "-config-",
                    {
                      "Ref": "AppVersion"
                    },
                    ".tar.gz"
                  ]
                ]
              }
            }
          }
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "config"
            ]
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceIAMRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "AWSEnv2CidrBlockPrefix",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "EnvType"
                  }
                ]
              },
              "0.0/16"
            ]
          ]
        },
        "EnableDnsHostnames": "True",
        "EnableDnsSupport": "True",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "WebServerFileSystem": {
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "PerformanceMode": "generalPurpose"
      },
      "Type": "AWS::EFS::FileSystem"
    }
  }
}
