
{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "SMDW Infrastructure and application setup",
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t2.micro": { "Arch": "64HVM" },
            "t2.small": { "Arch": "64HVM" },
            "t2.medium": { "Arch": "64HVM" },
            "t2.large": { "Arch": "64HVM" },
            "m3.medium": { "Arch": "64HVM" },
            "c4.large": { "Arch": "64HVM" },
            "m4.large": { "Arch": "64HVM" }
        },
        "AWSRegionArch2AMI": {
            "dev": {
                "64HVM": "ami-77dafe11",
                "64": "ami-41597c27"
            },
            "stage": {
                "64HVM": "ami-77dafe11",
                "64": "ami-41597c27"
            },
            "prd": {
                "64HVM": "ami-77dafe11",
                "64": "ami-41597c27"
            }
        },
        "AWSEnv2CidrBlockPrefix": {
            "eu-west-1": {
                "dev": "10.30",
                "stage": "10.40",
                "prd": "10.50"
            }
        },
        "AWSEnv2Route53ZoneID": {
            "eu-west-1": {
                "dev": "Z3NBKPKYJ6RJ9",
                "stage": "ZHC7VLRMIJ4EX",
                "prd": "ZHC7VLRMIJ4EX"
            }
        },
        "AWSEnv2Route53ZoneName": {
            "eu-west-1": {
                "dev": "dev.developer.sonymobile.com",
                "stage": "stage.developer.sonymobile.com",
                "prd": "developer.sonymobile.com"
            }
        },
        "AWSRegion2Env2ServerNodeInstanceType": {
            "eu-west-1": {
                "dev": "t2.micro",
                "stage": "t2.medium",
                "prd": "m3.medium"
            }
        },
        "AWSRegion2Env2RDSNodeInstanceType": {
            "eu-west-1": {
                "dev": "db.t2.small",
                "stage": "db.t2.small",
                "prd": "db.m4.large"
            }
        },
        "AWSRegion2Env2CacheNodeInstanceType": {
            "eu-west-1": {
                "dev": "cache.t2.micro",
                "stage": "cache.t2.small",
                "prd": "cache.t2.medium"
            }
        },
        "AWSRegion2Env2RDSAllocatedStorage": {
            "eu-west-1": {
                "dev": "10",
                "stage": "10",
                "prd": "100"
            }
        },
        "Env2CertificateARN": {
            "elb": {
                "dev": "arn:aws:acm:eu-west-1:834181233313:certificate/729a22ea-2535-4c0e-978a-badc8a835fa7",
                "stage": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079",
                "prd": "arn:aws:acm:eu-west-1:607562437455:certificate/790d3d24-c6b0-448c-80b6-905876f11079"
            },
            "cloudfront": {
                "dev": "arn:aws:acm:us-east-1:834181233313:certificate/fbeb7826-1de6-4868-8945-3c1b50a533f7",
                "stage": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c",
                "prd": "arn:aws:acm:us-east-1:607562437455:certificate/f5a13086-fe9c-40b0-9516-2a78db24735c"
            }
        },
        "Env2ASGSize": {
            "dev": {
                "min": "2",
                "desired": "2",
                "max": "3"
            },
            "stage": {
                "min": "2",
                "desired": "2",
                "max": "6"
            },
            "prd": {
                "min": "2",
                "desired": "2",
                "max": "8"
            }
        }
    },
    "Parameters": {
        "EnvType" : {
            "Description" : "Environment type.",
            "Type" : "String",
            "AllowedValues" : ["dev", "stage", "prd"],
            "ConstraintDescription" : "must specify dev, stage or prd"
        },
        "EnableCloudFront" : {
            "Description" : "Enable CloudFront",
            "Default" : "yes",
            "Type" : "String",
            "AllowedValues" : ["yes", "no"],
            "ConstraintDescription" : "must specify yes or no"
        },
        "AppName": {
            "Description": "Name of the software",
            "Type": "String",
            "Default": "developerworld"
        },
        "AppVersion": {
            "Description": "Version of the software",
            "Type": "String",
            "Default": "latest"
        },
        "KeyName": {
            "Description": "AWS key to use",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "AllowedValues" : ["smdw-dev", "smdw-stage", "smdw-prd"]
        },
        "NotificationEmail": {
            "Default": "dl-ww-developerprogram-infra@sonymobile.com,itpc.awsam@sonymobile.com",
            "Description": "Email Address(es) for notifications",
            "Type": "CommaDelimitedList"
        },
        "DBPassword": {
            "Description": "Database Password to use",
            "Type": "String",
            "NoEcho" : "true"
        },
        "LambdaDNSRole": {
            "Description": "ARN for Custom Route53 resource (Lambda)",
            "Type": "String",
            "Default": "arn:aws:iam::834181233313:role/foundation-dev-LambdaCustomCloudformationRole-1ARJD5SEP39IR"
        },
        "LambdaKMSArn": {
            "Description": "ARN for KMS Key ARN used in Lambda Custom Route53 resource",
            "Type": "String",
            "Default": "arn:aws:kms:eu-west-1:834181233313:key/4e8d92d5-52d7-401a-8c9d-1232d4856515"
        },
        "RemoteRoute53AccessKeyBlob": {
            "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource ACCESS_KEY",
            "Type": "String",
            "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAHIwcAYJKoZIhvcNAQcGoGMwYQIBADBcBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDAzkcxK0+YDPujynGwIBEIAvufcVfT0poMDu1y88jSX2srkyScVxVd1FnRRnZomb3ibC5OiBpk7EyhsQD+zrwlM="
        },
        "RemoteRoute53SecretKeyBlob": {
            "Description": "KMS encrypted CiphertextBlob for Lambda Custom Route53 resource SECRET_KEY",
            "Type": "String",
            "Default": "AQECAHj5LoAe4UaAJWJPfF8zvMJnRLwTvw46yQu52lf9b40nsAAAAIcwgYQGCSqGSIb3DQEHBqB3MHUCAQAwcAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAzNQMDNh/tR5tjBGlMCARCAQ7YkER+gcdhFrU2WErh3pYXmz/5qdmZfCYPOQGuOpjXtEzlTc9HlvvHeaLc2D1wWYlUc8gKBg4x9W3kM7s3h65KfRmQ="
        }
    },
    "Conditions": {
        "UseDevCondition": {"Fn::Equals": [
            {"Ref": "EnvType"},
            "dev" ]
        },
        "UsePrdCondition": {"Fn::Equals": [
            {"Ref": "EnvType"},
            "prd" ]
        },
        "EnableCloudFrontCondition": {"Fn::Equals": [
            {"Ref": "EnableCloudFront"},
            "yes" ]
        },
        "CloudFrontConditionDev": {
            "Fn::And": [
                {"Condition": "UseDevCondition" },
                {"Condition": "EnableCloudFrontCondition" }
            ]
        },
        "CloudFrontConditionPrdStage": {
            "Fn::And": [
                {"Fn::Not": [{"Condition": "UseDevCondition" }] },
                {"Condition": "EnableCloudFrontCondition" }
            ]
        }
    },
    "Resources": {
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": { "Ref": "InternetGateway" },
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": {
                    "Fn::Join" : [ ".", [
                        { "Fn::FindInMap": [ "AWSEnv2CidrBlockPrefix", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                        "0.0/16"
                    ]]
                },
                "EnableDnsHostnames": "True",
                "EnableDnsSupport": "True",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "CloudFrontRoute53CustomRecordSet": {
            "Condition": "CloudFrontConditionDev",
            "Type": "Custom::RemoteRoute53RecordSet",
            "Properties": {
                "ServiceToken": { "Fn::GetAtt" : ["LambdaChangeRoute53RecordSetFunction", "Arn"] },
                "Region": { "Ref": "AWS::Region" },
                "HostedZoneId": { "Fn::FindInMap": [ "AWSEnv2Route53ZoneID", { "Ref" : "AWS::Region" }, "prd" ] },
                "Name": {
                    "Fn::Join" : [ "", [
                        { "Fn::FindInMap": [
                                "AWSEnv2Route53ZoneName",
                                { "Ref" : "AWS::Region" },
                                { "Ref" : "EnvType" }
                            ]
                        }
                        ,"."
                    ] ]
                },
                "Value": { "Fn::GetAtt" : [ "DynamicCFDistribution", "DomainName" ] },
                "Type": "CNAME",
                "Comment": "DNS ALIAS for CloudFront Distribution"
            },
            "DependsOn" : [ "ElasticLoadBalancer" ]
        },
        "DynamicCFDNSAliasRecordSet" : {
            "Type" : "AWS::Route53::RecordSet",
            "Condition" : "CloudFrontConditionPrdStage",
            "DependsOn" : [ "ElasticLoadBalancer" ],
            "Properties" : {
                "Comment" : "DNS ALIAS for the Dynamic CloudFront Distribution",
                "Name" : {
                    "Fn::Join" : [ "", [
                    { "Fn::FindInMap": [
                            "AWSEnv2Route53ZoneName",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "EnvType" }
                        ]
                    }
                    ,"."
                    ] ]
                },
                "HostedZoneId" : {
                    "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneID",
                        { "Ref" : "AWS::Region" },
                        { "Ref" : "EnvType" }
                    ]
                },
                "AliasTarget": {
                    "DNSName" : { "Fn::GetAtt" : [ "DynamicCFDistribution", "DomainName" ] },
                    "EvaluateTargetHealth" : false,
                    "HostedZoneId" : "Z2FDTNDATAQYW2"
                },
                "Type": "A"
            }
        },
        "StaticAssetsCFDNSAliasRecordSet" : {
            "Type" : "AWS::Route53::RecordSet",
            "Condition" : "CloudFrontConditionPrdStage",
            "DependsOn" : [ "ElasticLoadBalancer" ],
            "Properties" : {
                "Comment" : "DNS ALIAS for the Static Assets CloudFront Distribution",
                "Name" : {
                    "Fn::Join": [
                        "",
                        [
                            { "Fn::If":
                                ["UsePrdCondition",
                                    "static.",
                                    "static-"
                                ]
                            },
                            { "Fn::FindInMap": [
                                    "AWSEnv2Route53ZoneName",
                                    { "Ref" : "AWS::Region" },
                                    { "Ref" : "EnvType" }
                                ]
                            },
                            "."
                        ]
                    ]
                },
                "HostedZoneId" : {
                    "Fn::FindInMap": [
                        "AWSEnv2Route53ZoneID",
                        { "Ref" : "AWS::Region" },
                        { "Ref" : "EnvType" }
                    ]
                },
                "AliasTarget": {
                    "DNSName" : { "Fn::GetAtt" : [ "StaticAssetsDistribution", "DomainName" ] },
                    "EvaluateTargetHealth" : false,
                    "HostedZoneId" : "Z2FDTNDATAQYW2"
                },
                "Type": "A"
            }
        },
        "InternalDNSZone": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": { "Fn::Join" : [ "", [ "Private Zone for ", { "Ref": "AWS::StackName" } ] ] }
                },
                "Name": {
                    "Fn::Join" : [ "", [
                        { "Fn::FindInMap": [
                            "AWSEnv2Route53ZoneName",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "EnvType" }
                        ] }
                        ,"." ] ]
                },
                "VPCs": [
                    {
                        "VPCId": { "Ref": "VPC" },
                        "VPCRegion": { "Ref": "AWS::Region" }
                    }
                ],
                "HostedZoneTags": [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            }
        },
        "RDSDNSRecordSet" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {"Ref" : "InternalDNSZone"},
                "Comment" : "DNS CNAME for RDS",
                "Name" : { "Fn::Join" : [ "",
                    [
                        "rds.",
                        { "Fn::FindInMap": [
                            "AWSEnv2Route53ZoneName",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "EnvType" }
                        ] }
                        ,"."
                    ]
                ] },
                "Type" : "CNAME",
                "TTL" : "60",
                "ResourceRecords" : [ { "Fn::GetAtt": ["DBInstance","Endpoint.Address"] } ]
            }
        },
        "ElastiCacheMemcacheDNSRecordSet" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {"Ref" : "InternalDNSZone"},
                "Comment" : "DNS CNAME for Memcache",
                "Name" : { "Fn::Join" : [ "",
                    [
                        "memcache.",
                        { "Fn::FindInMap": [
                            "AWSEnv2Route53ZoneName",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "EnvType" }
                        ] }
                        ,"."
                    ]
                ] },
                "Type" : "CNAME",
                "TTL" : "60",
                "ResourceRecords" : [ { "Fn::GetAtt": ["ElasticacheCluster","ConfigurationEndpoint.Address"] } ]
            }
        },
        "CPUAlarmHigh": {
            "Properties": {
                "AlarmActions": [ { "Ref": "ServerScaleUpPolicy" } ],
                "AlarmDescription": "Scale-up if CPU > 70% for 10 minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "ServerAutoScalingGroup" }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "240",
                "Statistic": "Average",
                "Threshold": "70"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "CPUAlarmLow": {
            "Properties": {
                "AlarmActions": [ { "Ref": "ServerScaleDownPolicy" }
                ],
                "AlarmDescription": "Scale-down if CPU < 30% for 10 minutes",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "ServerAutoScalingGroup" }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "240",
                "Statistic": "Average",
                "Threshold": "30"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "ElasticLoadBalancer": {
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "15",
                    "Target": { "Fn::Join": [ "", [ "HTTP:", "443", "/smdw.version.php" ] ] },
                    "Timeout": "5",
                    "UnhealthyThreshold": "7"
                },
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "ElasticLoadBalancerStickinessPolicy"
                    }
                ],
                "ConnectionDrainingPolicy": {
                    "Enabled" : true,
                    "Timeout" : 180
                },
                "CrossZone": true,
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "ElasticLoadBalancerStickinessPolicy"
                        ]
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "443",
                        "InstanceProtocol": "HTTP",
                        "PolicyNames": [
                            "Mozilla-modern-2015-03",
                            "ElasticLoadBalancerStickinessPolicy"
                        ],
                        "Protocol": "HTTPS",
                        "SSLCertificateId": { "Fn::FindInMap": [ "Env2CertificateARN", "elb", { "Ref" : "EnvType" } ] }
                    }
                ],
                "Policies": [
                    {
                        "PolicyName": "Mozilla-modern-2015-03",
                        "PolicyType": "SSLNegotiationPolicyType",
                        "Attributes": [
                            {
                                "Name": "Protocol-TLSv1.2",
                                "Value": true
                            },
                            {
                                "Name": "Server-Defined-Cipher-Order",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-ECDSA-AES128-GCM-SHA256",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-RSA-AES128-GCM-SHA256",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-ECDSA-AES128-SHA256",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-RSA-AES128-SHA256",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-ECDSA-AES256-GCM-SHA384",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-RSA-AES256-GCM-SHA384",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-ECDSA-AES256-SHA384",
                                "Value": true
                            },
                            {
                                "Name": "ECDHE-RSA-AES256-SHA384",
                                "Value": true
                            }
                        ]
                    }
                ],
                "SecurityGroups": [ { "Ref": "LoadBalancerSecurityGroup" } ],
                "Subnets": [
                    { "Ref": "PublicSubnet1" },
                    { "Ref": "PublicSubnet2" },
                    { "Ref": "PublicSubnet3" }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "EmailAlertSNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": { "Fn::Select": [ "0", { "Ref": "NotificationEmail" } ] },
                        "Protocol": "email"
                    },
                    {
                        "Endpoint": { "Fn::Select": [ "1", { "Ref": "NotificationEmail" } ] },
                        "Protocol": "email"
                    }
                ],
                "TopicName": { "Fn::Join": [ "", [ {"Ref": "AWS::StackName"}, "EmailAlertTopic" ] ] }
            }
        },
        "InboundHTTPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPSPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "200"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundSSHPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "54.247.104.255/32",
                "Egress": "false",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "300"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundDynamicPortsPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "400"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enables access to the ELB",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "OutboundHTTPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutBoundHTTPSPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "200"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutBoundSMTPSPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "587",
                    "To": "587"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "250"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutBoundDynamicPortPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "300"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PublicRoute": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet1": {
            "Properties": {
                "AvailabilityZone": "eu-west-1a",
                "CidrBlock": {
                    "Fn::Join" : [ ".", [
                        { "Fn::FindInMap": [ "AWSEnv2CidrBlockPrefix", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                        "1.0/24"
                    ]]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnet1NetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "SubnetId": { "Ref": "PublicSubnet1" }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicSubnet1RouteTableAssociation": {
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnet1" }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicSubnet2": {
            "Properties": {
                "AvailabilityZone": "eu-west-1b",
                "CidrBlock": {
                    "Fn::Join" : [ ".", [
                        { "Fn::FindInMap": [ "AWSEnv2CidrBlockPrefix", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                        "2.0/24"
                    ]]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnet2NetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "SubnetId": { "Ref": "PublicSubnet2" }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicSubnet2RouteTableAssociation": {
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnet2" }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicSubnet3": {
            "Properties": {
                "AvailabilityZone": "eu-west-1c",
                "CidrBlock": {
                    "Fn::Join" : [ ".", [
                        { "Fn::FindInMap": [ "AWSEnv2CidrBlockPrefix", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                        "3.0/24"
                    ]]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnet3NetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "SubnetId": { "Ref": "PublicSubnet3" }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicSubnet3RouteTableAssociation": {
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnet3" }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "S3StaticAssetsIAMUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {"Ref": "AWS::StackName"},
                                    "S3StaticAssets"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [ "s3:ListAllMyBuckets" ],
                                    "Resource": "arn:aws:s3:::*"
                                },
                                {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:*"
                                ],
                                "Resource": [
                                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "S3BucketStaticAssets" } ] ] },
                                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "S3BucketStaticAssets" }, "/*" ] ] }
                                ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "S3StaticAssetsBucketAccessKey": {
            "Properties": {
                "UserName": {
                    "Ref": "S3StaticAssetsIAMUser"
                }
            },
            "Type": "AWS::IAM::AccessKey"
        },
        "S3BucketStaticAssets": {
            "DeletionPolicy": "Delete",
            "Properties": {
                "AccessControl": "PublicRead",
                "BucketName": {
                    "Fn::Join": [
                        "",
                        [
                            { "Fn::If":
                                ["UsePrdCondition",
                                    "static.",
                                    "static-"
                                ]
                            },
                            { "Fn::FindInMap": [
                                    "AWSEnv2Route53ZoneName",
                                    { "Ref" : "AWS::Region" },
                                    { "Ref" : "EnvType" }
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "Type": "AWS::S3::Bucket"
        },
        "S3BucketStaticAssetsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": { "Ref": "S3BucketStaticAssets" },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "s3:GetObject",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "S3BucketStaticAssets" }, "/*" ] ] }
                        }
                    ]
                }
            }
        },
        "StaticAssetsDistribution" : {
            "Condition": "EnableCloudFrontCondition",
            "Type" : "AWS::CloudFront::Distribution",
            "DependsOn" : [ "DBInstance", "ElasticLoadBalancer" ],
            "Properties" : {
                "DistributionConfig" : {
                    "Origins" : [ {
                        "DomainName" : { "Fn::Join": [ "",
                                [{"Ref": "S3BucketStaticAssets"},
                                ".s3.amazonaws.com"]
                            ]
                        },
                        "Id" : { "Fn::Join": [ "", [
                                    "S3StaticAssetsOrigin",
                                    {"Ref": "AWS::StackName"}
                                ]
                            ]
                        },
                        "S3OriginConfig": {
                            "OriginAccessIdentity": ""
                        }
                    }],
                    "HttpVersion" : "http2",
                    "Enabled" : "true",
                    "Comment" : {
                        "Fn::Join": [ "",
                            [
                                "Static assets for ",
                                {"Ref": "EnvType"},
                                " in stack ",
                                {"Ref": "AWS::StackName"}
                            ]
                        ]
                    },
                    "Aliases" : [ { "Fn::Join" : [ "", [
                                { "Fn::If":
                                    ["UsePrdCondition",
                                        "static.",
                                        "static-"
                                    ]
                                },
                                { "Fn::FindInMap": [
                                        "AWSEnv2Route53ZoneName",
                                        { "Ref" : "AWS::Region" },
                                        { "Ref" : "EnvType" }
                                    ]
                                }
                            ] ]
                        }
                    ],
                    "DefaultCacheBehavior" : {
                        "AllowedMethods" : [ "GET", "HEAD" ],
                        "TargetOriginId" : { "Fn::Join": [ "", [
                                    "S3StaticAssetsOrigin",
                                    {"Ref": "AWS::StackName"}
                                ]
                            ]
                        },
                        "ForwardedValues" : {
                            "QueryString" : "false",
                            "Cookies" : { "Forward" : "none" }
                        },
                        "ViewerProtocolPolicy" : "redirect-to-https"
                    },
                    "PriceClass" : "PriceClass_All",
                    "ViewerCertificate": {
                        "AcmCertificateArn": { "Fn::FindInMap": [ "Env2CertificateARN", "cloudfront", { "Ref" : "EnvType" } ] },
                        "SslSupportMethod": "sni-only"
                    }
                }
            }
        },
        "CloudFrontStaticAssetsRoute53CustomRecordSet": {
            "Condition": "CloudFrontConditionDev",
            "Type": "Custom::RemoteRoute53RecordSet",
            "Properties": {
                "ServiceToken": { "Fn::GetAtt" : ["LambdaChangeRoute53RecordSetFunction", "Arn"] },
                "Region": { "Ref": "AWS::Region" },
                "HostedZoneId": { "Fn::FindInMap": [ "AWSEnv2Route53ZoneID", { "Ref" : "AWS::Region" }, "prd" ] },
                "Name": {
                    "Fn::Join" : [ "", [
                        { "Fn::If":
                            ["UsePrdCondition",
                                "static.",
                                "static-"
                            ]
                        },
                        { "Ref" : "EnvType" },
                        ".",
                        { "Fn::FindInMap": [
                                "AWSEnv2Route53ZoneName",
                                { "Ref" : "AWS::Region" },
                                "prd"
                            ]
                        }
                    ] ]
                },
                "Value": { "Fn::GetAtt" : [ "StaticAssetsDistribution", "DomainName" ] },
                "Type": "CNAME",
                "Comment": "DNS ALIAS for Static Assets CloudFront Distribution"
            }
        },
        "S3BucketDynamicCFLogs": {
            "DeletionPolicy": "Delete",
            "Properties": {
                "AccessControl": "LogDeliveryWrite",
                "BucketName": { "Fn::Join" : [ "", [
                            { "Fn::FindInMap": [ "AWSEnv2Route53ZoneName", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                            ".logs"
                        ]
                    ]
                },
                "LifecycleConfiguration": {
                    "Rules" : [ {
                        "ExpirationInDays" : 365,
                        "Id" : "1 year retention",
                        "Status" : "Enabled",
                        "Transitions": [
                            {
                                "StorageClass" : "STANDARD_IA",
                                "TransitionInDays" : 30
                            }
                        ]
                    } ]
                },
                "Tags": [
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "Type": "AWS::S3::Bucket"
        },
        "DynamicCFDistribution" : {
            "Condition": "EnableCloudFrontCondition",
            "Type" : "AWS::CloudFront::Distribution",
            "DependsOn" : [ "DBInstance", "ElasticLoadBalancer" ],
            "Properties" : {
                "DistributionConfig" : {
                    "Origins" : [ {
                            "DomainName" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ] },
                            "Id" : { "Fn::Join": [ "", [
                                        "DynamicContentOrigin",
                                        {"Ref": "AWS::StackName"}
                                    ]
                                ]
                            },
                            "CustomOriginConfig" : {
                                "HTTPPort" : "80",
                                "HTTPSPort" : "443",
                                "OriginProtocolPolicy" : "https-only",
                                "OriginSSLProtocols": [ "TLSv1.2" ]
                            }
                    } ],
                    "HttpVersion" : "http2",
                    "Enabled" : "true",
                    "Comment" : {
                        "Fn::Join": [ "",
                            [
                                "Dynamic Web for ",
                                {"Ref": "EnvType"},
                                " in stack ",
                                {"Ref": "AWS::StackName"}
                            ]
                        ]
                    },
                    "Aliases" : [ { "Fn::Join" : [ "", [
                            { "Fn::FindInMap": [
                                    "AWSEnv2Route53ZoneName",
                                    { "Ref" : "AWS::Region" },
                                    { "Ref" : "EnvType" }
                                ]
                            }
                            ] ]
                        }
                    ],
                    "Logging": {
                        "Bucket" : { "Fn::Join": [ "",
                                [{"Ref": "S3BucketDynamicCFLogs"},
                                ".s3.amazonaws.com"]
                            ]
                        }
                    },
                    "DefaultCacheBehavior" : {
                        "TargetOriginId" : { "Fn::Join": [ "", [
                                    "DynamicContentOrigin",
                                    {"Ref": "AWS::StackName"}
                                ]
                            ]
                        },
                        "ViewerProtocolPolicy": "redirect-to-https",
                        "ForwardedValues": {
                            "QueryString": true,
                            "Headers": [ "Authorization", "Host" ],
                            "Cookies": { "Forward": "all" }
                        },
                        "MaxTTL": 31536000,
                        "DefaultTTL": 86400,
                        "AllowedMethods": [
                            "HEAD",
                            "DELETE",
                            "POST",
                            "GET",
                            "OPTIONS",
                            "PUT",
                            "PATCH"
                        ],
                        "CachedMethods": [ "HEAD", "GET" ]
                    },
                    "CustomErrorResponses" : [ {
                        "ErrorCode": 500,
                        "ResponsePagePath": "/error.html",
                        "ResponseCode": "500",
                        "ErrorCachingMinTTL": 0
                    }],
                    "PriceClass" : "PriceClass_All",
                    "ViewerCertificate": {
                        "AcmCertificateArn": { "Fn::FindInMap": [ "Env2CertificateARN", "cloudfront", { "Ref" : "EnvType" } ] },
                        "SslSupportMethod": "sni-only"
                    }
                }
            }
        },
        "WebServerFileSystem" : {
            "Type" : "AWS::EFS::FileSystem",
            "Properties" : {
                "PerformanceMode": "generalPurpose",
                "FileSystemTags" : [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    }
                ]
            }
        },
        "MountTargetPublicSubnet1": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": { "Ref": "WebServerFileSystem" },
                "SubnetId": { "Ref": "PublicSubnet1" },
                "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
            }
        },
        "MountTargetPublicSubnet2": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": { "Ref": "WebServerFileSystem" },
                "SubnetId": { "Ref": "PublicSubnet2" },
                "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
            }
        },
        "MountTargetPublicSubnet3": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": { "Ref": "WebServerFileSystem" },
                "SubnetId": { "Ref": "PublicSubnet3" },
                "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
            }
        },
        "MountTargetSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "GroupDescription": "Security group for mount target",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "2049",
                        "ToPort": "2049",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElasticacheSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Join": [
                        "",
                        [
                            "ElastiCache Memcache Subnet Group for ",
                            { "Ref": "AppName" },
                            " in ",
                            { "Ref": "EnvType" }
                        ]
                    ]
                },
                "VpcId": { "Ref": "VPC" }
            }
        },
        "ElastiCacheSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "ElasticacheSecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": "11211",
                "ToPort": "11211",
                "SourceSecurityGroupId": {"Ref": "ServerSecurityGroup"}
            }
        },
        "ElastiCacheSubnetGroup": {
            "Type": "AWS::ElastiCache::SubnetGroup",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "Memcache Cache Subnet Group for ",
                            { "Ref": "AppName" },
                            " in ",
                            { "Ref": "EnvType" }
                        ]
                    ]
                },
                "SubnetIds": [
                    { "Ref": "PublicSubnet1" },
                    { "Ref": "PublicSubnet2" },
                    { "Ref": "PublicSubnet3" }
                ]
            }
        },
        "ElasticacheCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "AutoMinorVersionUpgrade": "true",
                "Engine": "memcached",
                "CacheSubnetGroupName": { "Ref": "ElastiCacheSubnetGroup" },
                "NotificationTopicArn": { "Ref": "EmailAlertSNSTopic" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "CacheNodeType": {
                    "Fn::FindInMap": [
                        "AWSRegion2Env2CacheNodeInstanceType",
                        { "Ref" : "AWS::Region" },
                        { "Ref" : "EnvType" }
                    ]
                },
                "NumCacheNodes": "1",
                "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "ElasticacheSecurityGroup", "GroupId"]}]
            }
        },
        "CodeDeployServiceIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "codedeploy.eu-west-1.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"]
            }
        },
        "ServerIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"]
            }
        },
        "CloudFormationReadAndSignalPolicy":  {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "AWS::StackName"},
                            "CFNSignal"
                        ]
                    ]
                },
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:DescribeStackEvents",
                                "cloudformation:DescribeStackResource",
                                "cloudformation:DescribeStackResources",
                                "cloudformation:DescribeStacks",
                                "cloudformation:ListChangeSets",
                                "cloudformation:ListStackResources",
                                "cloudformation:ListStacks",
                                "cloudformation:SignalResource"
                            ],
                            "Resource": [ { "Ref": "AWS::StackId" } ]
                        }
                    ]
                },
                "Roles": [ {"Ref": "ServerIAMRole"} ]
            }
        },
        "ASGandELBManagementPolicy":  {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "AWS::StackName"},
                            "ASGandELBManagement"
                        ]
                    ]
                },
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:Describe*",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                "autoscaling:Describe*",
                                "autoscaling:EnterStandby",
                                "autoscaling:ExitStandby",
                                "autoscaling:UpdateAutoScalingGroup",
                                "autoscaling:SuspendProcesses",
                                "autoscaling:ResumeProcesses"
                            ],
                            "Resource": [ "*" ]
                        }
                    ]
                },
                "Roles": [ {"Ref": "ServerIAMRole"} ]
            }
        },
        "EFSDescribePolicy":  {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "AWS::StackName"},
                            "EFSDescribe"
                        ]
                    ]
                },
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                            {
                                "Sid": "Stmt1479465360000",
                                "Effect": "Allow",
                                "Action": [
                                    "elasticfilesystem:DescribeFileSystems",
                                    "elasticfilesystem:DescribeMountTargets"
                                ],
                                "Resource": [ "*" ]
                            }
                        ]
                    },
                    "Roles": [ {"Ref": "ServerIAMRole"} ]
            }
        },
        "CloudwatchPolicy":  {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : {
                    "Fn::Join": [ "", [ {"Ref": "AWS::StackName"}, "CloudWatchPutPolicy" ] ]
                },
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudwatch:PutMetricData"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "Roles": [ {"Ref": "ServerIAMRole"} ]
            }
        },
        "S3DeployBucketAccessPolicy":  {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "AWS::StackName"},
                            "S3DeployBucketAccess"
                        ]
                    ]
                },
                "PolicyDocument" : {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:Get*",
                                    "s3:List*"
                                ],
                                "Resource": [
                                    { "Fn::Join": [
                                            "", [ "arn:aws:s3:::", "deploy.",
                                            { "Fn::FindInMap": [
                                                    "AWSEnv2Route53ZoneName",
                                                    { "Ref" : "AWS::Region" },
                                                    { "Ref" : "EnvType" }
                                                ]
                                            },
                                            "/*" ]
                                        ]
                                    },
                                    "arn:aws:s3:::aws-codedeploy-eu-west-1/*"
                                ]
                            }
                        ]
                },
                "Roles": [ {"Ref": "ServerIAMRole"} ]
            }
        },
        "AWSCloudwatchLogsStreamPolicy": {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : {
                    "Fn::Join": [
                        "",
                        [ {"Ref": "AWS::StackName"}, "CloudWatchLogsStream" ]
                    ]
                },
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams"
                            ],
                            "Resource": [ "arn:aws:logs:*:*:*" ]
                        }
                    ]
                },
                "Roles": [ {"Ref": "ServerIAMRole"} ]
            }
        },
        "ApplicationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "",
                        [ {"Ref": "AWS::StackName"}, "-", { "Ref": "AppName" } ]
                    ]
                },
                "RetentionInDays": 1
            }
        },
        "ServerAutoScalingGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": 0,
                    "Timeout": "PT5M"
                }
            },
            "Properties": {
                "AvailabilityZones": [
                    { "Fn::GetAtt": [ "PublicSubnet1", "AvailabilityZone" ] },
                    { "Fn::GetAtt": [ "PublicSubnet2", "AvailabilityZone" ] },
                    { "Fn::GetAtt": [ "PublicSubnet3", "AvailabilityZone" ] }
                ],
                "LaunchConfigurationName": { "Ref": "ServerLaunchConfiguration" },
                "LoadBalancerNames": [ { "Ref": "ElasticLoadBalancer" } ],
                "MaxSize": { "Fn::FindInMap": [ "Env2ASGSize", { "Ref" : "EnvType" }, "max" ] },
                "MinSize": { "Fn::FindInMap": [ "Env2ASGSize", { "Ref" : "EnvType" }, "min" ] },
                "DesiredCapacity": { "Fn::FindInMap": [ "Env2ASGSize", { "Ref" : "EnvType" }, "desired" ] },
                "MetricsCollection": [{ "Granularity" : "1Minute" }],
                "NotificationConfigurations": [
                    {
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                        ],
                        "TopicARN": { "Ref": "EmailAlertSNSTopic" }
                    }
                ],
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": "300",
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "asg" ] ]
                        }
                    },
                    {
                        "Key": "Environment",
                        "PropagateAtLaunch": "true",
                        "Value": { "Ref": "EnvType" }
                    }
                ],
                "TerminationPolicies": [ "OldestInstance" ],
                "VPCZoneIdentifier": [
                    { "Ref": "PublicSubnet1" },
                    { "Ref": "PublicSubnet2" },
                    { "Ref": "PublicSubnet3" }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1",
                    "MinInstancesInService": "2",
                    "PauseTime": "PT5M",
                    "WaitOnResourceSignals": "true"
                },
                "AutoScalingScheduledAction": {
                    "IgnoreUnmodifiedGroupSizeProperties": "true"
                }
            },
            "DependsOn" : [ "DBInstance", "RDSDNSRecordSet" ]
        },
        "ServerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    { "Ref": "ServerIAMRole" }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ServerLaunchConfiguration": {
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "IamInstanceProfile": { "Ref": "ServerInstanceProfile" },
                "ImageId": {
                    "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "EnvType" },
                        {
                            "Fn::FindInMap": [ "AWSInstanceType2Arch", {
                                "Fn::FindInMap": [
                                    "AWSRegion2Env2ServerNodeInstanceType",
                                    { "Ref" : "AWS::Region" },
                                    { "Ref" : "EnvType" }
                                ]
                            }, "Arch" ]
                        }
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "AWSRegion2Env2ServerNodeInstanceType",
                        { "Ref" : "AWS::Region" },
                        { "Ref" : "EnvType" }
                    ]
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [ { "Ref": "ServerSecurityGroup" } ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "set -eu\n",
                                "# Helper function\n",
                                "function error_exit {\n",
                                "    cfn-signal --success false --resource ServerAutoScalingGroup --stack ",
                                    { "Ref": "AWS::StackName" }, " --region ", { "Ref": "AWS::Region" }, "\n",
                                "    exit 1\n",
                                "}\n",
                                "## Setup Hostname ##\n",
                                "instanceID=$(curl -Ss http://instance-data/latest/meta-data/instance-id)\n",
                                "hostname=\"smdw-", { "Ref": "EnvType" }, "-${instanceID#*-}\"\n",
                                "hostnamectl set-hostname \"$hostname\"\n",
                                "sed -i \"s/127.0.0.1 localhost/127.0.0.1 localhost $hostname/\" /etc/hosts\n",
                                "\n",
                                "availabilityZone=$(curl -Ss http://instance-data/latest/meta-data/placement/availability-zone)\n",
                                "efsID=$(aws --region=eu-west-1 efs describe-file-systems | jq -r \".FileSystems[] | [select(.Name == \\\"",
                                    { "Ref": "AWS::StackName" } ,"\\\")]\" | jq -r '.[].FileSystemId')\n",
                                "efsTarget=${availabilityZone}.${efsID}.efs.", { "Ref": "AWS::Region" }, ".amazonaws.com\n",
                                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2",
                                "    ${efsTarget}:/ /var/www/wordpress/wp-content/blogs.dir || error_exit 'Unable to mount EFS'\n",
                                "\n",
                                "## Signal Success ##\n",
                                "cfn-signal --resource ServerAutoScalingGroup --stack ", { "Ref": "AWS::StackName" },
                                " --region ", { "Ref": "AWS::Region" }, "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ServerScaleDownPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": { "Ref": "ServerAutoScalingGroup" },
                "Cooldown": "300",
                "ScalingAdjustment": "-1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "ServerScaleUpPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": { "Ref": "ServerAutoScalingGroup" },
                "Cooldown": "300",
                "ScalingAdjustment": "1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "ServerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enables HTTP access via port 80 (from ELB only) and SSH access from Resource Server",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup" },
                        "ToPort": "80"
                    },
                    {
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup" },
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": "54.247.104.255/32",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Open database for access",
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : "3306",
                    "ToPort" : "3306",
                    "SourceSecurityGroupId" : { "Fn::GetAtt": [ "ServerSecurityGroup", "GroupId" ] }
                }],
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "DependsOn" : [ "ServerSecurityGroup" ]
        },
        "DBSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : "RDS VPC Subnet Group",
                "SubnetIds" : [
                    { "Ref": "PublicSubnet1" },
                    { "Ref": "PublicSubnet2" },
                    { "Ref": "PublicSubnet3" }
                ],
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            }
        },
        "DBInstance" : {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "mysql",
                "AutoMinorVersionUpgrade": true,
                "EngineVersion": "5.7",
                "MultiAZ": {"Fn::If": [ "UseDevCondition", false, true ] },
                "MasterUsername": { "Fn::Join": [ "", [ "developer", { "Ref": "EnvType" } ] ] },
                "DBName": { "Fn::Join": [ "", [ "developer", { "Ref": "EnvType" } ] ] },
                "DBInstanceIdentifier": { "Ref": "AWS::StackName" },
                "DBInstanceClass": { "Fn::FindInMap": [ "AWSRegion2Env2RDSNodeInstanceType", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                "AllocatedStorage": { "Fn::FindInMap": [ "AWSRegion2Env2RDSAllocatedStorage", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" } ] },
                "MasterUserPassword": { "Ref" : "DBPassword" },
                "VPCSecurityGroups": [ { "Fn::GetAtt": [ "DBEC2SecurityGroup", "GroupId" ] } ],
                "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
                "StorageType": "gp2",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Ref": "AWS::StackName" }
                    },
                    {
                        "Key": "Environment",
                        "Value": { "Ref": "EnvType" }
                    }
                ]
            },
            "DeletionPolicy" : "Delete"
        },
        "ApplicationDeploy" : {
            "Type" : "AWS::CodeDeploy::Application",
            "Properties" : {
                "ApplicationName" : { "Ref": "AWS::StackName" }
            }
        },
        "SystemConfigDeploymentGroup": {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "ApplicationName" : { "Ref": "ApplicationDeploy" },
                "AutoScalingGroups" : [ { "Ref": "ServerAutoScalingGroup" } ],
                "Deployment" : {
                    "Description" : {"Fn::Join": ["", [
                        { "Ref": "AppName" },
                        " System Config Deployment Group for ",
                        { "Ref": "EnvType" },
                        " environment"
                    ]]},
                    "IgnoreApplicationStopFailures" : "true",
                    "Revision" : {
                        "RevisionType": "S3",
                        "S3Location": {
                            "Bucket": {
                                "Fn::Join" : [ "", [
                                    "deploy.",
                                    { "Fn::FindInMap": [
                                            "AWSEnv2Route53ZoneName",
                                            { "Ref" : "AWS::Region" },
                                            { "Ref" : "EnvType" }
                                        ]
                                    }
                                ] ]
                            },
                            "BundleType": "tgz",
                            "Key": {"Fn::Join": ["", [
                                { "Ref": "AppName" },
                                "-config-",
                                { "Ref": "AppVersion" },
                                ".tar.gz"
                            ]]}
                        }
                    }
                },
                "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
                "DeploymentGroupName" : {"Fn::Join": ["-", [
                        { "Ref": "AWS::StackName" },
                        "config"
                    ]]
                },
                "ServiceRoleArn" : {"Fn::GetAtt" : ["CodeDeployServiceIAMRole", "Arn"] }
            }
        },
        "ApplicationDeploymentGroup": {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "ApplicationName" : { "Ref": "ApplicationDeploy" },
                "AutoScalingGroups" : [ { "Ref": "ServerAutoScalingGroup" } ],
                "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
                "DeploymentGroupName" : {"Fn::Join": ["-", [
                        { "Ref": "AWS::StackName" },
                        "wordpress"
                    ]]
                },
                "Deployment" : {
                    "Description" : {"Fn::Join": ["", [
                        { "Ref": "AppName" },
                        " Wordpress Deployment Group for ",
                        { "Ref": "EnvType" },
                        " environment"
                    ]]},
                    "IgnoreApplicationStopFailures" : "true",
                    "Revision" : {
                        "RevisionType": "S3",
                        "S3Location": {
                            "Bucket": {
                                "Fn::Join" : [ "", [
                                    "deploy.",
                                    { "Fn::FindInMap": [
                                            "AWSEnv2Route53ZoneName",
                                            { "Ref" : "AWS::Region" },
                                            { "Ref" : "EnvType" }
                                        ]
                                    }
                                ] ]
                            },
                            "BundleType": "tgz",
                            "Key": {"Fn::Join": ["", [
                                { "Ref": "AppName" },
                                "-",
                                { "Ref": "AppVersion" },
                                ".tar.gz"
                            ]]}
                        }
                    }
                },
                "ServiceRoleArn" : {"Fn::GetAtt" : ["CodeDeployServiceIAMRole", "Arn"] }
            }
        },
        "LambdaChangeRoute53RecordSetFunction": {
            "Condition": "UseDevCondition",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Join" : [ "", [
                            "deploy.",
                            { "Fn::FindInMap": [
                                    "AWSEnv2Route53ZoneName",
                                    { "Ref" : "AWS::Region" },
                                    { "Ref" : "EnvType" }
                                ]
                            }
                        ] ]
                    },
                    "S3Key": "builds/aws-lambda-change_recordset_other_hosted_zone.zip"
                },
                "Description": "Lambda function for changing Route53 resource sets on a remote account using IAM AccessKeys",
                "Handler": "lambda_function.lambda_handler",
                "Role": { "Ref": "LambdaDNSRole" },
                "Runtime": "python2.7",
                "KmsKeyArn" : { "Ref": "LambdaKMSArn" },
                "Timeout": "60",
                "Environment": {
                    "Variables" : {
                            "AWS_ACCESS_KEY_ID_BLOB": { "Ref": "RemoteRoute53AccessKeyBlob" },
                            "AWS_SECRET_ACCESS_KEY_BLOB": { "Ref": "RemoteRoute53SecretKeyBlob" }
                    }
                }
            },
            "Type": "AWS::Lambda::Function"
        }
    },
    "Outputs": {
        "RDSDNSName" : {
            "Description": "The DNSName of the RDS service",
            "Value" : {"Fn::GetAtt": ["DBInstance","Endpoint.Address"]}
        },
        "RDSInternalDNSName" : {
            "Description": "The Internal DNS Name of the RDS service",
            "Value" : {"Ref": "RDSDNSRecordSet" }
        },
        "MemcacheInternalDNSName" : {
            "Description": "The Internal DNS Name of the Memcache service",
            "Value" : {"Ref": "ElastiCacheMemcacheDNSRecordSet" }
        },
        "S3StaticAssetsBucketName" : {
            "Description": "The S3 Static assets bucket name",
            "Value" : {"Ref": "S3BucketStaticAssets" }
        },
        "S3StaticAssetsBucketAccessKeyID": {
            "Description": "S3StaticAssetsBucketAccessKey ID",
            "Value": {
                "Ref": "S3StaticAssetsBucketAccessKey"
            }
        },
        "S3StaticAssetsBucketAccessKeySecret": {
            "Description": "S3StaticAssetsBucketAccessKey Secret",
            "Value": {
            "Fn::GetAtt": [
                    "S3StaticAssetsBucketAccessKey",
                    "SecretAccessKey"
                ]
            }
        }
    }
}
